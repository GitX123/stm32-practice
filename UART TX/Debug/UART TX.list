
UART TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d2c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000ec4  08000ec4  00010ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ed4  08000ed4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08000ed4  08000ed4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ed4  08000ed4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed8  08000ed8  00010ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08000edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08000f3c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08000f3c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c16  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000804  00000000  00000000  00021ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c8  00000000  00000000  000224f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001f0  00000000  00000000  000227b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015706  00000000  00000000  000229a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003241  00000000  00000000  000380ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083ff1  00000000  00000000  0003b2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f3c  00000000  00000000  000bf2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000eac 	.word	0x08000eac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08000eac 	.word	0x08000eac

080001d8 <main>:
#include <stdio.h>
#include <stdint.h>
#include "stm32f4xx.h"
#include "uart.h"

int main() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	uart2_tx_init();
 80001dc:	f000 f918 	bl	8000410 <uart2_tx_init>
	while (1) {
		printf("Hello World.\n");
 80001e0:	4801      	ldr	r0, [pc, #4]	; (80001e8 <main+0x10>)
 80001e2:	f000 facd 	bl	8000780 <puts>
 80001e6:	e7fb      	b.n	80001e0 <main+0x8>
 80001e8:	08000ec4 	.word	0x08000ec4

080001ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <NMI_Handler+0x4>

080001f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001f6:	e7fe      	b.n	80001f6 <HardFault_Handler+0x4>

080001f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <MemManage_Handler+0x4>

080001fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001fe:	b480      	push	{r7}
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000202:	e7fe      	b.n	8000202 <BusFault_Handler+0x4>

08000204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000208:	e7fe      	b.n	8000208 <UsageFault_Handler+0x4>

0800020a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800020a:	b480      	push	{r7}
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800020e:	bf00      	nop
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000226:	b480      	push	{r7}
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000238:	f000 f978 	bl	800052c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}

08000240 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800024c:	2300      	movs	r3, #0
 800024e:	617b      	str	r3, [r7, #20]
 8000250:	e00a      	b.n	8000268 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000252:	f3af 8000 	nop.w
 8000256:	4601      	mov	r1, r0
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	1c5a      	adds	r2, r3, #1
 800025c:	60ba      	str	r2, [r7, #8]
 800025e:	b2ca      	uxtb	r2, r1
 8000260:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	3301      	adds	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
 8000268:	697a      	ldr	r2, [r7, #20]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	429a      	cmp	r2, r3
 800026e:	dbf0      	blt.n	8000252 <_read+0x12>
  }

  return len;
 8000270:	687b      	ldr	r3, [r7, #4]
}
 8000272:	4618      	mov	r0, r3
 8000274:	3718      	adds	r7, #24
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	b086      	sub	sp, #24
 800027e:	af00      	add	r7, sp, #0
 8000280:	60f8      	str	r0, [r7, #12]
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	e009      	b.n	80002a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	1c5a      	adds	r2, r3, #1
 8000290:	60ba      	str	r2, [r7, #8]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f8ae 	bl	80003f6 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	3301      	adds	r3, #1
 800029e:	617b      	str	r3, [r7, #20]
 80002a0:	697a      	ldr	r2, [r7, #20]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	dbf1      	blt.n	800028c <_write+0x12>
  }
  return len;
 80002a8:	687b      	ldr	r3, [r7, #4]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <_close>:

int _close(int file)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002ca:	b480      	push	{r7}
 80002cc:	b083      	sub	sp, #12
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
 80002d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002da:	605a      	str	r2, [r3, #4]
  return 0;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <_isatty>:

int _isatty(int file)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002f2:	2301      	movs	r3, #1
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800030c:	2300      	movs	r3, #0
}
 800030e:	4618      	mov	r0, r3
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
	...

0800031c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000324:	4a14      	ldr	r2, [pc, #80]	; (8000378 <_sbrk+0x5c>)
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <_sbrk+0x60>)
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <_sbrk+0x64>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d102      	bne.n	800033e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <_sbrk+0x64>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <_sbrk+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <_sbrk+0x64>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	693a      	ldr	r2, [r7, #16]
 8000348:	429a      	cmp	r2, r3
 800034a:	d207      	bcs.n	800035c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800034c:	f000 fb46 	bl	80009dc <__errno>
 8000350:	4603      	mov	r3, r0
 8000352:	220c      	movs	r2, #12
 8000354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800035a:	e009      	b.n	8000370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <_sbrk+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <_sbrk+0x64>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4413      	add	r3, r2
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <_sbrk+0x64>)
 800036c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800036e:	68fb      	ldr	r3, [r7, #12]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20020000 	.word	0x20020000
 800037c:	00000400 	.word	0x00000400
 8000380:	2000007c 	.word	0x2000007c
 8000384:	200001d0 	.word	0x200001d0

08000388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <SystemInit+0x20>)
 800038e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000392:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <SystemInit+0x20>)
 8000394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <compute_uart_bd>:

#define SYS_FREQ 16000000
#define APB1_CLK SYS_FREQ
#define UART_BAUDRATE 115200

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate / 2U)) / BaudRate;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	085a      	lsrs	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	441a      	add	r2, r3
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c4:	b29b      	uxth	r3, r3
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b084      	sub	sp, #16
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	60f8      	str	r0, [r7, #12]
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	68b8      	ldr	r0, [r7, #8]
 80003e2:	f7ff ffe3 	bl	80003ac <compute_uart_bd>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	609a      	str	r2, [r3, #8]
}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <__io_putchar>:

// override printf's internal function
int __io_putchar(int ch) {
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f000 f852 	bl	80004a8 <uart2_write>
	return ch;
 8000404:	687b      	ldr	r3, [r7, #4]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <uart2_tx_init>:

void uart2_tx_init() {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	/* configure GPIO pin */
	// enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000414:	4b20      	ldr	r3, [pc, #128]	; (8000498 <uart2_tx_init+0x88>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <uart2_tx_init+0x88>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6313      	str	r3, [r2, #48]	; 0x30

	// set PA2 mode to alternate function (10)
	GPIOA->MODER &= (1U << 4);
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <uart2_tx_init+0x8c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a1d      	ldr	r2, [pc, #116]	; (800049c <uart2_tx_init+0x8c>)
 8000426:	f003 0310 	and.w	r3, r3, #16
 800042a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <uart2_tx_init+0x8c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a1a      	ldr	r2, [pc, #104]	; (800049c <uart2_tx_init+0x8c>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6013      	str	r3, [r2, #0]

	// set alternate function type to UART_TX (AF07 0111)
	GPIOA->AFR[0] |= (1U << 8);
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <uart2_tx_init+0x8c>)
 800043a:	6a1b      	ldr	r3, [r3, #32]
 800043c:	4a17      	ldr	r2, [pc, #92]	; (800049c <uart2_tx_init+0x8c>)
 800043e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000442:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <uart2_tx_init+0x8c>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	4a14      	ldr	r2, [pc, #80]	; (800049c <uart2_tx_init+0x8c>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800044e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <uart2_tx_init+0x8c>)
 8000452:	6a1b      	ldr	r3, [r3, #32]
 8000454:	4a11      	ldr	r2, [pc, #68]	; (800049c <uart2_tx_init+0x8c>)
 8000456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <uart2_tx_init+0x8c>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	4a0e      	ldr	r2, [pc, #56]	; (800049c <uart2_tx_init+0x8c>)
 8000462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000466:	6213      	str	r3, [r2, #32]

	/* configure UART module */
	// enable clock access to UART2
	RCC->APB1ENR |= UART2EN;
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <uart2_tx_init+0x88>)
 800046a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800046c:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <uart2_tx_init+0x88>)
 800046e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000472:	6413      	str	r3, [r2, #64]	; 0x40

	// configure baud rate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000478:	4909      	ldr	r1, [pc, #36]	; (80004a0 <uart2_tx_init+0x90>)
 800047a:	480a      	ldr	r0, [pc, #40]	; (80004a4 <uart2_tx_init+0x94>)
 800047c:	f7ff ffa9 	bl	80003d2 <uart_set_baudrate>

	// configure transfer direction
	USART2->CR1 = CR1_TE;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <uart2_tx_init+0x94>)
 8000482:	2208      	movs	r2, #8
 8000484:	60da      	str	r2, [r3, #12]

	// enable UART module
	USART2->CR1 |= CR1_UE;
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <uart2_tx_init+0x94>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <uart2_tx_init+0x94>)
 800048c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000490:	60d3      	str	r3, [r2, #12]
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40023800 	.word	0x40023800
 800049c:	40020000 	.word	0x40020000
 80004a0:	00f42400 	.word	0x00f42400
 80004a4:	40004400 	.word	0x40004400

080004a8 <uart2_write>:

void uart2_write(int ch) {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while (!(USART2->SR & SR_TXE));
 80004b0:	bf00      	nop
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <uart2_write+0x2c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f9      	beq.n	80004b2 <uart2_write+0xa>

	USART2->DR = (ch & 0xFF); // 1 byte
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <uart2_write+0x2c>)
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	6053      	str	r3, [r2, #4]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40004400 	.word	0x40004400

080004d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000510 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004de:	490e      	ldr	r1, [pc, #56]	; (8000518 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004f4:	4c0b      	ldr	r4, [pc, #44]	; (8000524 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000502:	f7ff ff41 	bl	8000388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f000 fa6f 	bl	80009e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050a:	f7ff fe65 	bl	80001d8 <main>
  bx  lr    
 800050e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800051c:	08000edc 	.word	0x08000edc
  ldr r2, =_sbss
 8000520:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000524:	200001d0 	.word	0x200001d0

08000528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20000080 	.word	0x20000080

08000554 <std>:
 8000554:	2300      	movs	r3, #0
 8000556:	b510      	push	{r4, lr}
 8000558:	4604      	mov	r4, r0
 800055a:	e9c0 3300 	strd	r3, r3, [r0]
 800055e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000562:	6083      	str	r3, [r0, #8]
 8000564:	8181      	strh	r1, [r0, #12]
 8000566:	6643      	str	r3, [r0, #100]	; 0x64
 8000568:	81c2      	strh	r2, [r0, #14]
 800056a:	6183      	str	r3, [r0, #24]
 800056c:	4619      	mov	r1, r3
 800056e:	2208      	movs	r2, #8
 8000570:	305c      	adds	r0, #92	; 0x5c
 8000572:	f000 f9e5 	bl	8000940 <memset>
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <std+0x58>)
 8000578:	6263      	str	r3, [r4, #36]	; 0x24
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <std+0x5c>)
 800057c:	62a3      	str	r3, [r4, #40]	; 0x28
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <std+0x60>)
 8000580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <std+0x64>)
 8000584:	6323      	str	r3, [r4, #48]	; 0x30
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <std+0x68>)
 8000588:	6224      	str	r4, [r4, #32]
 800058a:	429c      	cmp	r4, r3
 800058c:	d006      	beq.n	800059c <std+0x48>
 800058e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000592:	4294      	cmp	r4, r2
 8000594:	d002      	beq.n	800059c <std+0x48>
 8000596:	33d0      	adds	r3, #208	; 0xd0
 8000598:	429c      	cmp	r4, r3
 800059a:	d105      	bne.n	80005a8 <std+0x54>
 800059c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80005a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a4:	f000 ba44 	b.w	8000a30 <__retarget_lock_init_recursive>
 80005a8:	bd10      	pop	{r4, pc}
 80005aa:	bf00      	nop
 80005ac:	08000791 	.word	0x08000791
 80005b0:	080007b3 	.word	0x080007b3
 80005b4:	080007eb 	.word	0x080007eb
 80005b8:	0800080f 	.word	0x0800080f
 80005bc:	20000084 	.word	0x20000084

080005c0 <stdio_exit_handler>:
 80005c0:	4a02      	ldr	r2, [pc, #8]	; (80005cc <stdio_exit_handler+0xc>)
 80005c2:	4903      	ldr	r1, [pc, #12]	; (80005d0 <stdio_exit_handler+0x10>)
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <stdio_exit_handler+0x14>)
 80005c6:	f000 b869 	b.w	800069c <_fwalk_sglue>
 80005ca:	bf00      	nop
 80005cc:	20000004 	.word	0x20000004
 80005d0:	08000d35 	.word	0x08000d35
 80005d4:	20000010 	.word	0x20000010

080005d8 <cleanup_stdio>:
 80005d8:	6841      	ldr	r1, [r0, #4]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <cleanup_stdio+0x34>)
 80005dc:	4299      	cmp	r1, r3
 80005de:	b510      	push	{r4, lr}
 80005e0:	4604      	mov	r4, r0
 80005e2:	d001      	beq.n	80005e8 <cleanup_stdio+0x10>
 80005e4:	f000 fba6 	bl	8000d34 <_fflush_r>
 80005e8:	68a1      	ldr	r1, [r4, #8]
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <cleanup_stdio+0x38>)
 80005ec:	4299      	cmp	r1, r3
 80005ee:	d002      	beq.n	80005f6 <cleanup_stdio+0x1e>
 80005f0:	4620      	mov	r0, r4
 80005f2:	f000 fb9f 	bl	8000d34 <_fflush_r>
 80005f6:	68e1      	ldr	r1, [r4, #12]
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <cleanup_stdio+0x3c>)
 80005fa:	4299      	cmp	r1, r3
 80005fc:	d004      	beq.n	8000608 <cleanup_stdio+0x30>
 80005fe:	4620      	mov	r0, r4
 8000600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000604:	f000 bb96 	b.w	8000d34 <_fflush_r>
 8000608:	bd10      	pop	{r4, pc}
 800060a:	bf00      	nop
 800060c:	20000084 	.word	0x20000084
 8000610:	200000ec 	.word	0x200000ec
 8000614:	20000154 	.word	0x20000154

08000618 <global_stdio_init.part.0>:
 8000618:	b510      	push	{r4, lr}
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <global_stdio_init.part.0+0x30>)
 800061c:	4c0b      	ldr	r4, [pc, #44]	; (800064c <global_stdio_init.part.0+0x34>)
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <global_stdio_init.part.0+0x38>)
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	4620      	mov	r0, r4
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	f7ff ff94 	bl	8000554 <std>
 800062c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000630:	2201      	movs	r2, #1
 8000632:	2109      	movs	r1, #9
 8000634:	f7ff ff8e 	bl	8000554 <std>
 8000638:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800063c:	2202      	movs	r2, #2
 800063e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000642:	2112      	movs	r1, #18
 8000644:	f7ff bf86 	b.w	8000554 <std>
 8000648:	200001bc 	.word	0x200001bc
 800064c:	20000084 	.word	0x20000084
 8000650:	080005c1 	.word	0x080005c1

08000654 <__sfp_lock_acquire>:
 8000654:	4801      	ldr	r0, [pc, #4]	; (800065c <__sfp_lock_acquire+0x8>)
 8000656:	f000 b9ec 	b.w	8000a32 <__retarget_lock_acquire_recursive>
 800065a:	bf00      	nop
 800065c:	200001c5 	.word	0x200001c5

08000660 <__sfp_lock_release>:
 8000660:	4801      	ldr	r0, [pc, #4]	; (8000668 <__sfp_lock_release+0x8>)
 8000662:	f000 b9e7 	b.w	8000a34 <__retarget_lock_release_recursive>
 8000666:	bf00      	nop
 8000668:	200001c5 	.word	0x200001c5

0800066c <__sinit>:
 800066c:	b510      	push	{r4, lr}
 800066e:	4604      	mov	r4, r0
 8000670:	f7ff fff0 	bl	8000654 <__sfp_lock_acquire>
 8000674:	6a23      	ldr	r3, [r4, #32]
 8000676:	b11b      	cbz	r3, 8000680 <__sinit+0x14>
 8000678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800067c:	f7ff bff0 	b.w	8000660 <__sfp_lock_release>
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__sinit+0x28>)
 8000682:	6223      	str	r3, [r4, #32]
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__sinit+0x2c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f5      	bne.n	8000678 <__sinit+0xc>
 800068c:	f7ff ffc4 	bl	8000618 <global_stdio_init.part.0>
 8000690:	e7f2      	b.n	8000678 <__sinit+0xc>
 8000692:	bf00      	nop
 8000694:	080005d9 	.word	0x080005d9
 8000698:	200001bc 	.word	0x200001bc

0800069c <_fwalk_sglue>:
 800069c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006a0:	4607      	mov	r7, r0
 80006a2:	4688      	mov	r8, r1
 80006a4:	4614      	mov	r4, r2
 80006a6:	2600      	movs	r6, #0
 80006a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006ac:	f1b9 0901 	subs.w	r9, r9, #1
 80006b0:	d505      	bpl.n	80006be <_fwalk_sglue+0x22>
 80006b2:	6824      	ldr	r4, [r4, #0]
 80006b4:	2c00      	cmp	r4, #0
 80006b6:	d1f7      	bne.n	80006a8 <_fwalk_sglue+0xc>
 80006b8:	4630      	mov	r0, r6
 80006ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006be:	89ab      	ldrh	r3, [r5, #12]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d907      	bls.n	80006d4 <_fwalk_sglue+0x38>
 80006c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006c8:	3301      	adds	r3, #1
 80006ca:	d003      	beq.n	80006d4 <_fwalk_sglue+0x38>
 80006cc:	4629      	mov	r1, r5
 80006ce:	4638      	mov	r0, r7
 80006d0:	47c0      	blx	r8
 80006d2:	4306      	orrs	r6, r0
 80006d4:	3568      	adds	r5, #104	; 0x68
 80006d6:	e7e9      	b.n	80006ac <_fwalk_sglue+0x10>

080006d8 <_puts_r>:
 80006d8:	6a03      	ldr	r3, [r0, #32]
 80006da:	b570      	push	{r4, r5, r6, lr}
 80006dc:	6884      	ldr	r4, [r0, #8]
 80006de:	4605      	mov	r5, r0
 80006e0:	460e      	mov	r6, r1
 80006e2:	b90b      	cbnz	r3, 80006e8 <_puts_r+0x10>
 80006e4:	f7ff ffc2 	bl	800066c <__sinit>
 80006e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ea:	07db      	lsls	r3, r3, #31
 80006ec:	d405      	bmi.n	80006fa <_puts_r+0x22>
 80006ee:	89a3      	ldrh	r3, [r4, #12]
 80006f0:	0598      	lsls	r0, r3, #22
 80006f2:	d402      	bmi.n	80006fa <_puts_r+0x22>
 80006f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006f6:	f000 f99c 	bl	8000a32 <__retarget_lock_acquire_recursive>
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	0719      	lsls	r1, r3, #28
 80006fe:	d513      	bpl.n	8000728 <_puts_r+0x50>
 8000700:	6923      	ldr	r3, [r4, #16]
 8000702:	b18b      	cbz	r3, 8000728 <_puts_r+0x50>
 8000704:	3e01      	subs	r6, #1
 8000706:	68a3      	ldr	r3, [r4, #8]
 8000708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800070c:	3b01      	subs	r3, #1
 800070e:	60a3      	str	r3, [r4, #8]
 8000710:	b9e9      	cbnz	r1, 800074e <_puts_r+0x76>
 8000712:	2b00      	cmp	r3, #0
 8000714:	da2e      	bge.n	8000774 <_puts_r+0x9c>
 8000716:	4622      	mov	r2, r4
 8000718:	210a      	movs	r1, #10
 800071a:	4628      	mov	r0, r5
 800071c:	f000 f87b 	bl	8000816 <__swbuf_r>
 8000720:	3001      	adds	r0, #1
 8000722:	d007      	beq.n	8000734 <_puts_r+0x5c>
 8000724:	250a      	movs	r5, #10
 8000726:	e007      	b.n	8000738 <_puts_r+0x60>
 8000728:	4621      	mov	r1, r4
 800072a:	4628      	mov	r0, r5
 800072c:	f000 f8b0 	bl	8000890 <__swsetup_r>
 8000730:	2800      	cmp	r0, #0
 8000732:	d0e7      	beq.n	8000704 <_puts_r+0x2c>
 8000734:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800073a:	07da      	lsls	r2, r3, #31
 800073c:	d405      	bmi.n	800074a <_puts_r+0x72>
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	059b      	lsls	r3, r3, #22
 8000742:	d402      	bmi.n	800074a <_puts_r+0x72>
 8000744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000746:	f000 f975 	bl	8000a34 <__retarget_lock_release_recursive>
 800074a:	4628      	mov	r0, r5
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	2b00      	cmp	r3, #0
 8000750:	da04      	bge.n	800075c <_puts_r+0x84>
 8000752:	69a2      	ldr	r2, [r4, #24]
 8000754:	429a      	cmp	r2, r3
 8000756:	dc06      	bgt.n	8000766 <_puts_r+0x8e>
 8000758:	290a      	cmp	r1, #10
 800075a:	d004      	beq.n	8000766 <_puts_r+0x8e>
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	6022      	str	r2, [r4, #0]
 8000762:	7019      	strb	r1, [r3, #0]
 8000764:	e7cf      	b.n	8000706 <_puts_r+0x2e>
 8000766:	4622      	mov	r2, r4
 8000768:	4628      	mov	r0, r5
 800076a:	f000 f854 	bl	8000816 <__swbuf_r>
 800076e:	3001      	adds	r0, #1
 8000770:	d1c9      	bne.n	8000706 <_puts_r+0x2e>
 8000772:	e7df      	b.n	8000734 <_puts_r+0x5c>
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	250a      	movs	r5, #10
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	6022      	str	r2, [r4, #0]
 800077c:	701d      	strb	r5, [r3, #0]
 800077e:	e7db      	b.n	8000738 <_puts_r+0x60>

08000780 <puts>:
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <puts+0xc>)
 8000782:	4601      	mov	r1, r0
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	f7ff bfa7 	b.w	80006d8 <_puts_r>
 800078a:	bf00      	nop
 800078c:	2000005c 	.word	0x2000005c

08000790 <__sread>:
 8000790:	b510      	push	{r4, lr}
 8000792:	460c      	mov	r4, r1
 8000794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000798:	f000 f8fc 	bl	8000994 <_read_r>
 800079c:	2800      	cmp	r0, #0
 800079e:	bfab      	itete	ge
 80007a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007a2:	89a3      	ldrhlt	r3, [r4, #12]
 80007a4:	181b      	addge	r3, r3, r0
 80007a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007aa:	bfac      	ite	ge
 80007ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80007ae:	81a3      	strhlt	r3, [r4, #12]
 80007b0:	bd10      	pop	{r4, pc}

080007b2 <__swrite>:
 80007b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007b6:	461f      	mov	r7, r3
 80007b8:	898b      	ldrh	r3, [r1, #12]
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	4605      	mov	r5, r0
 80007be:	460c      	mov	r4, r1
 80007c0:	4616      	mov	r6, r2
 80007c2:	d505      	bpl.n	80007d0 <__swrite+0x1e>
 80007c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007c8:	2302      	movs	r3, #2
 80007ca:	2200      	movs	r2, #0
 80007cc:	f000 f8d0 	bl	8000970 <_lseek_r>
 80007d0:	89a3      	ldrh	r3, [r4, #12]
 80007d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007da:	81a3      	strh	r3, [r4, #12]
 80007dc:	4632      	mov	r2, r6
 80007de:	463b      	mov	r3, r7
 80007e0:	4628      	mov	r0, r5
 80007e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007e6:	f000 b8e7 	b.w	80009b8 <_write_r>

080007ea <__sseek>:
 80007ea:	b510      	push	{r4, lr}
 80007ec:	460c      	mov	r4, r1
 80007ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007f2:	f000 f8bd 	bl	8000970 <_lseek_r>
 80007f6:	1c43      	adds	r3, r0, #1
 80007f8:	89a3      	ldrh	r3, [r4, #12]
 80007fa:	bf15      	itete	ne
 80007fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80007fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000806:	81a3      	strheq	r3, [r4, #12]
 8000808:	bf18      	it	ne
 800080a:	81a3      	strhne	r3, [r4, #12]
 800080c:	bd10      	pop	{r4, pc}

0800080e <__sclose>:
 800080e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000812:	f000 b89d 	b.w	8000950 <_close_r>

08000816 <__swbuf_r>:
 8000816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000818:	460e      	mov	r6, r1
 800081a:	4614      	mov	r4, r2
 800081c:	4605      	mov	r5, r0
 800081e:	b118      	cbz	r0, 8000828 <__swbuf_r+0x12>
 8000820:	6a03      	ldr	r3, [r0, #32]
 8000822:	b90b      	cbnz	r3, 8000828 <__swbuf_r+0x12>
 8000824:	f7ff ff22 	bl	800066c <__sinit>
 8000828:	69a3      	ldr	r3, [r4, #24]
 800082a:	60a3      	str	r3, [r4, #8]
 800082c:	89a3      	ldrh	r3, [r4, #12]
 800082e:	071a      	lsls	r2, r3, #28
 8000830:	d525      	bpl.n	800087e <__swbuf_r+0x68>
 8000832:	6923      	ldr	r3, [r4, #16]
 8000834:	b31b      	cbz	r3, 800087e <__swbuf_r+0x68>
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	6922      	ldr	r2, [r4, #16]
 800083a:	1a98      	subs	r0, r3, r2
 800083c:	6963      	ldr	r3, [r4, #20]
 800083e:	b2f6      	uxtb	r6, r6
 8000840:	4283      	cmp	r3, r0
 8000842:	4637      	mov	r7, r6
 8000844:	dc04      	bgt.n	8000850 <__swbuf_r+0x3a>
 8000846:	4621      	mov	r1, r4
 8000848:	4628      	mov	r0, r5
 800084a:	f000 fa73 	bl	8000d34 <_fflush_r>
 800084e:	b9e0      	cbnz	r0, 800088a <__swbuf_r+0x74>
 8000850:	68a3      	ldr	r3, [r4, #8]
 8000852:	3b01      	subs	r3, #1
 8000854:	60a3      	str	r3, [r4, #8]
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	6022      	str	r2, [r4, #0]
 800085c:	701e      	strb	r6, [r3, #0]
 800085e:	6962      	ldr	r2, [r4, #20]
 8000860:	1c43      	adds	r3, r0, #1
 8000862:	429a      	cmp	r2, r3
 8000864:	d004      	beq.n	8000870 <__swbuf_r+0x5a>
 8000866:	89a3      	ldrh	r3, [r4, #12]
 8000868:	07db      	lsls	r3, r3, #31
 800086a:	d506      	bpl.n	800087a <__swbuf_r+0x64>
 800086c:	2e0a      	cmp	r6, #10
 800086e:	d104      	bne.n	800087a <__swbuf_r+0x64>
 8000870:	4621      	mov	r1, r4
 8000872:	4628      	mov	r0, r5
 8000874:	f000 fa5e 	bl	8000d34 <_fflush_r>
 8000878:	b938      	cbnz	r0, 800088a <__swbuf_r+0x74>
 800087a:	4638      	mov	r0, r7
 800087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800087e:	4621      	mov	r1, r4
 8000880:	4628      	mov	r0, r5
 8000882:	f000 f805 	bl	8000890 <__swsetup_r>
 8000886:	2800      	cmp	r0, #0
 8000888:	d0d5      	beq.n	8000836 <__swbuf_r+0x20>
 800088a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800088e:	e7f4      	b.n	800087a <__swbuf_r+0x64>

08000890 <__swsetup_r>:
 8000890:	b538      	push	{r3, r4, r5, lr}
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <__swsetup_r+0xac>)
 8000894:	4605      	mov	r5, r0
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	460c      	mov	r4, r1
 800089a:	b118      	cbz	r0, 80008a4 <__swsetup_r+0x14>
 800089c:	6a03      	ldr	r3, [r0, #32]
 800089e:	b90b      	cbnz	r3, 80008a4 <__swsetup_r+0x14>
 80008a0:	f7ff fee4 	bl	800066c <__sinit>
 80008a4:	89a3      	ldrh	r3, [r4, #12]
 80008a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008aa:	0718      	lsls	r0, r3, #28
 80008ac:	d422      	bmi.n	80008f4 <__swsetup_r+0x64>
 80008ae:	06d9      	lsls	r1, r3, #27
 80008b0:	d407      	bmi.n	80008c2 <__swsetup_r+0x32>
 80008b2:	2309      	movs	r3, #9
 80008b4:	602b      	str	r3, [r5, #0]
 80008b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008ba:	81a3      	strh	r3, [r4, #12]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c0:	e034      	b.n	800092c <__swsetup_r+0x9c>
 80008c2:	0758      	lsls	r0, r3, #29
 80008c4:	d512      	bpl.n	80008ec <__swsetup_r+0x5c>
 80008c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008c8:	b141      	cbz	r1, 80008dc <__swsetup_r+0x4c>
 80008ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d002      	beq.n	80008d8 <__swsetup_r+0x48>
 80008d2:	4628      	mov	r0, r5
 80008d4:	f000 f8b0 	bl	8000a38 <_free_r>
 80008d8:	2300      	movs	r3, #0
 80008da:	6363      	str	r3, [r4, #52]	; 0x34
 80008dc:	89a3      	ldrh	r3, [r4, #12]
 80008de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008e2:	81a3      	strh	r3, [r4, #12]
 80008e4:	2300      	movs	r3, #0
 80008e6:	6063      	str	r3, [r4, #4]
 80008e8:	6923      	ldr	r3, [r4, #16]
 80008ea:	6023      	str	r3, [r4, #0]
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	81a3      	strh	r3, [r4, #12]
 80008f4:	6923      	ldr	r3, [r4, #16]
 80008f6:	b94b      	cbnz	r3, 800090c <__swsetup_r+0x7c>
 80008f8:	89a3      	ldrh	r3, [r4, #12]
 80008fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000902:	d003      	beq.n	800090c <__swsetup_r+0x7c>
 8000904:	4621      	mov	r1, r4
 8000906:	4628      	mov	r0, r5
 8000908:	f000 fa62 	bl	8000dd0 <__smakebuf_r>
 800090c:	89a0      	ldrh	r0, [r4, #12]
 800090e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000912:	f010 0301 	ands.w	r3, r0, #1
 8000916:	d00a      	beq.n	800092e <__swsetup_r+0x9e>
 8000918:	2300      	movs	r3, #0
 800091a:	60a3      	str	r3, [r4, #8]
 800091c:	6963      	ldr	r3, [r4, #20]
 800091e:	425b      	negs	r3, r3
 8000920:	61a3      	str	r3, [r4, #24]
 8000922:	6923      	ldr	r3, [r4, #16]
 8000924:	b943      	cbnz	r3, 8000938 <__swsetup_r+0xa8>
 8000926:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800092a:	d1c4      	bne.n	80008b6 <__swsetup_r+0x26>
 800092c:	bd38      	pop	{r3, r4, r5, pc}
 800092e:	0781      	lsls	r1, r0, #30
 8000930:	bf58      	it	pl
 8000932:	6963      	ldrpl	r3, [r4, #20]
 8000934:	60a3      	str	r3, [r4, #8]
 8000936:	e7f4      	b.n	8000922 <__swsetup_r+0x92>
 8000938:	2000      	movs	r0, #0
 800093a:	e7f7      	b.n	800092c <__swsetup_r+0x9c>
 800093c:	2000005c 	.word	0x2000005c

08000940 <memset>:
 8000940:	4402      	add	r2, r0
 8000942:	4603      	mov	r3, r0
 8000944:	4293      	cmp	r3, r2
 8000946:	d100      	bne.n	800094a <memset+0xa>
 8000948:	4770      	bx	lr
 800094a:	f803 1b01 	strb.w	r1, [r3], #1
 800094e:	e7f9      	b.n	8000944 <memset+0x4>

08000950 <_close_r>:
 8000950:	b538      	push	{r3, r4, r5, lr}
 8000952:	4d06      	ldr	r5, [pc, #24]	; (800096c <_close_r+0x1c>)
 8000954:	2300      	movs	r3, #0
 8000956:	4604      	mov	r4, r0
 8000958:	4608      	mov	r0, r1
 800095a:	602b      	str	r3, [r5, #0]
 800095c:	f7ff fca9 	bl	80002b2 <_close>
 8000960:	1c43      	adds	r3, r0, #1
 8000962:	d102      	bne.n	800096a <_close_r+0x1a>
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	b103      	cbz	r3, 800096a <_close_r+0x1a>
 8000968:	6023      	str	r3, [r4, #0]
 800096a:	bd38      	pop	{r3, r4, r5, pc}
 800096c:	200001c0 	.word	0x200001c0

08000970 <_lseek_r>:
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4d07      	ldr	r5, [pc, #28]	; (8000990 <_lseek_r+0x20>)
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	2200      	movs	r2, #0
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	f7ff fcbe 	bl	8000300 <_lseek>
 8000984:	1c43      	adds	r3, r0, #1
 8000986:	d102      	bne.n	800098e <_lseek_r+0x1e>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	b103      	cbz	r3, 800098e <_lseek_r+0x1e>
 800098c:	6023      	str	r3, [r4, #0]
 800098e:	bd38      	pop	{r3, r4, r5, pc}
 8000990:	200001c0 	.word	0x200001c0

08000994 <_read_r>:
 8000994:	b538      	push	{r3, r4, r5, lr}
 8000996:	4d07      	ldr	r5, [pc, #28]	; (80009b4 <_read_r+0x20>)
 8000998:	4604      	mov	r4, r0
 800099a:	4608      	mov	r0, r1
 800099c:	4611      	mov	r1, r2
 800099e:	2200      	movs	r2, #0
 80009a0:	602a      	str	r2, [r5, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f7ff fc4c 	bl	8000240 <_read>
 80009a8:	1c43      	adds	r3, r0, #1
 80009aa:	d102      	bne.n	80009b2 <_read_r+0x1e>
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	b103      	cbz	r3, 80009b2 <_read_r+0x1e>
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	bd38      	pop	{r3, r4, r5, pc}
 80009b4:	200001c0 	.word	0x200001c0

080009b8 <_write_r>:
 80009b8:	b538      	push	{r3, r4, r5, lr}
 80009ba:	4d07      	ldr	r5, [pc, #28]	; (80009d8 <_write_r+0x20>)
 80009bc:	4604      	mov	r4, r0
 80009be:	4608      	mov	r0, r1
 80009c0:	4611      	mov	r1, r2
 80009c2:	2200      	movs	r2, #0
 80009c4:	602a      	str	r2, [r5, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	f7ff fc57 	bl	800027a <_write>
 80009cc:	1c43      	adds	r3, r0, #1
 80009ce:	d102      	bne.n	80009d6 <_write_r+0x1e>
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	b103      	cbz	r3, 80009d6 <_write_r+0x1e>
 80009d4:	6023      	str	r3, [r4, #0]
 80009d6:	bd38      	pop	{r3, r4, r5, pc}
 80009d8:	200001c0 	.word	0x200001c0

080009dc <__errno>:
 80009dc:	4b01      	ldr	r3, [pc, #4]	; (80009e4 <__errno+0x8>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2000005c 	.word	0x2000005c

080009e8 <__libc_init_array>:
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	4d0d      	ldr	r5, [pc, #52]	; (8000a20 <__libc_init_array+0x38>)
 80009ec:	4c0d      	ldr	r4, [pc, #52]	; (8000a24 <__libc_init_array+0x3c>)
 80009ee:	1b64      	subs	r4, r4, r5
 80009f0:	10a4      	asrs	r4, r4, #2
 80009f2:	2600      	movs	r6, #0
 80009f4:	42a6      	cmp	r6, r4
 80009f6:	d109      	bne.n	8000a0c <__libc_init_array+0x24>
 80009f8:	4d0b      	ldr	r5, [pc, #44]	; (8000a28 <__libc_init_array+0x40>)
 80009fa:	4c0c      	ldr	r4, [pc, #48]	; (8000a2c <__libc_init_array+0x44>)
 80009fc:	f000 fa56 	bl	8000eac <_init>
 8000a00:	1b64      	subs	r4, r4, r5
 8000a02:	10a4      	asrs	r4, r4, #2
 8000a04:	2600      	movs	r6, #0
 8000a06:	42a6      	cmp	r6, r4
 8000a08:	d105      	bne.n	8000a16 <__libc_init_array+0x2e>
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a10:	4798      	blx	r3
 8000a12:	3601      	adds	r6, #1
 8000a14:	e7ee      	b.n	80009f4 <__libc_init_array+0xc>
 8000a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a1a:	4798      	blx	r3
 8000a1c:	3601      	adds	r6, #1
 8000a1e:	e7f2      	b.n	8000a06 <__libc_init_array+0x1e>
 8000a20:	08000ed4 	.word	0x08000ed4
 8000a24:	08000ed4 	.word	0x08000ed4
 8000a28:	08000ed4 	.word	0x08000ed4
 8000a2c:	08000ed8 	.word	0x08000ed8

08000a30 <__retarget_lock_init_recursive>:
 8000a30:	4770      	bx	lr

08000a32 <__retarget_lock_acquire_recursive>:
 8000a32:	4770      	bx	lr

08000a34 <__retarget_lock_release_recursive>:
 8000a34:	4770      	bx	lr
	...

08000a38 <_free_r>:
 8000a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	d044      	beq.n	8000ac8 <_free_r+0x90>
 8000a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a42:	9001      	str	r0, [sp, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f1a1 0404 	sub.w	r4, r1, #4
 8000a4a:	bfb8      	it	lt
 8000a4c:	18e4      	addlt	r4, r4, r3
 8000a4e:	f000 f8df 	bl	8000c10 <__malloc_lock>
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <_free_r+0x94>)
 8000a54:	9801      	ldr	r0, [sp, #4]
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	b933      	cbnz	r3, 8000a68 <_free_r+0x30>
 8000a5a:	6063      	str	r3, [r4, #4]
 8000a5c:	6014      	str	r4, [r2, #0]
 8000a5e:	b003      	add	sp, #12
 8000a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a64:	f000 b8da 	b.w	8000c1c <__malloc_unlock>
 8000a68:	42a3      	cmp	r3, r4
 8000a6a:	d908      	bls.n	8000a7e <_free_r+0x46>
 8000a6c:	6825      	ldr	r5, [r4, #0]
 8000a6e:	1961      	adds	r1, r4, r5
 8000a70:	428b      	cmp	r3, r1
 8000a72:	bf01      	itttt	eq
 8000a74:	6819      	ldreq	r1, [r3, #0]
 8000a76:	685b      	ldreq	r3, [r3, #4]
 8000a78:	1949      	addeq	r1, r1, r5
 8000a7a:	6021      	streq	r1, [r4, #0]
 8000a7c:	e7ed      	b.n	8000a5a <_free_r+0x22>
 8000a7e:	461a      	mov	r2, r3
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	b10b      	cbz	r3, 8000a88 <_free_r+0x50>
 8000a84:	42a3      	cmp	r3, r4
 8000a86:	d9fa      	bls.n	8000a7e <_free_r+0x46>
 8000a88:	6811      	ldr	r1, [r2, #0]
 8000a8a:	1855      	adds	r5, r2, r1
 8000a8c:	42a5      	cmp	r5, r4
 8000a8e:	d10b      	bne.n	8000aa8 <_free_r+0x70>
 8000a90:	6824      	ldr	r4, [r4, #0]
 8000a92:	4421      	add	r1, r4
 8000a94:	1854      	adds	r4, r2, r1
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	6011      	str	r1, [r2, #0]
 8000a9a:	d1e0      	bne.n	8000a5e <_free_r+0x26>
 8000a9c:	681c      	ldr	r4, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	6053      	str	r3, [r2, #4]
 8000aa2:	440c      	add	r4, r1
 8000aa4:	6014      	str	r4, [r2, #0]
 8000aa6:	e7da      	b.n	8000a5e <_free_r+0x26>
 8000aa8:	d902      	bls.n	8000ab0 <_free_r+0x78>
 8000aaa:	230c      	movs	r3, #12
 8000aac:	6003      	str	r3, [r0, #0]
 8000aae:	e7d6      	b.n	8000a5e <_free_r+0x26>
 8000ab0:	6825      	ldr	r5, [r4, #0]
 8000ab2:	1961      	adds	r1, r4, r5
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	bf04      	itt	eq
 8000ab8:	6819      	ldreq	r1, [r3, #0]
 8000aba:	685b      	ldreq	r3, [r3, #4]
 8000abc:	6063      	str	r3, [r4, #4]
 8000abe:	bf04      	itt	eq
 8000ac0:	1949      	addeq	r1, r1, r5
 8000ac2:	6021      	streq	r1, [r4, #0]
 8000ac4:	6054      	str	r4, [r2, #4]
 8000ac6:	e7ca      	b.n	8000a5e <_free_r+0x26>
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd30      	pop	{r4, r5, pc}
 8000acc:	200001c8 	.word	0x200001c8

08000ad0 <sbrk_aligned>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	4e0e      	ldr	r6, [pc, #56]	; (8000b0c <sbrk_aligned+0x3c>)
 8000ad4:	460c      	mov	r4, r1
 8000ad6:	6831      	ldr	r1, [r6, #0]
 8000ad8:	4605      	mov	r5, r0
 8000ada:	b911      	cbnz	r1, 8000ae2 <sbrk_aligned+0x12>
 8000adc:	f000 f9d6 	bl	8000e8c <_sbrk_r>
 8000ae0:	6030      	str	r0, [r6, #0]
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f000 f9d1 	bl	8000e8c <_sbrk_r>
 8000aea:	1c43      	adds	r3, r0, #1
 8000aec:	d00a      	beq.n	8000b04 <sbrk_aligned+0x34>
 8000aee:	1cc4      	adds	r4, r0, #3
 8000af0:	f024 0403 	bic.w	r4, r4, #3
 8000af4:	42a0      	cmp	r0, r4
 8000af6:	d007      	beq.n	8000b08 <sbrk_aligned+0x38>
 8000af8:	1a21      	subs	r1, r4, r0
 8000afa:	4628      	mov	r0, r5
 8000afc:	f000 f9c6 	bl	8000e8c <_sbrk_r>
 8000b00:	3001      	adds	r0, #1
 8000b02:	d101      	bne.n	8000b08 <sbrk_aligned+0x38>
 8000b04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000b08:	4620      	mov	r0, r4
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	200001cc 	.word	0x200001cc

08000b10 <_malloc_r>:
 8000b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b14:	1ccd      	adds	r5, r1, #3
 8000b16:	f025 0503 	bic.w	r5, r5, #3
 8000b1a:	3508      	adds	r5, #8
 8000b1c:	2d0c      	cmp	r5, #12
 8000b1e:	bf38      	it	cc
 8000b20:	250c      	movcc	r5, #12
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	4607      	mov	r7, r0
 8000b26:	db01      	blt.n	8000b2c <_malloc_r+0x1c>
 8000b28:	42a9      	cmp	r1, r5
 8000b2a:	d905      	bls.n	8000b38 <_malloc_r+0x28>
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	2600      	movs	r6, #0
 8000b32:	4630      	mov	r0, r6
 8000b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c0c <_malloc_r+0xfc>
 8000b3c:	f000 f868 	bl	8000c10 <__malloc_lock>
 8000b40:	f8d8 3000 	ldr.w	r3, [r8]
 8000b44:	461c      	mov	r4, r3
 8000b46:	bb5c      	cbnz	r4, 8000ba0 <_malloc_r+0x90>
 8000b48:	4629      	mov	r1, r5
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	f7ff ffc0 	bl	8000ad0 <sbrk_aligned>
 8000b50:	1c43      	adds	r3, r0, #1
 8000b52:	4604      	mov	r4, r0
 8000b54:	d155      	bne.n	8000c02 <_malloc_r+0xf2>
 8000b56:	f8d8 4000 	ldr.w	r4, [r8]
 8000b5a:	4626      	mov	r6, r4
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d145      	bne.n	8000bec <_malloc_r+0xdc>
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d048      	beq.n	8000bf6 <_malloc_r+0xe6>
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	4631      	mov	r1, r6
 8000b68:	4638      	mov	r0, r7
 8000b6a:	eb04 0903 	add.w	r9, r4, r3
 8000b6e:	f000 f98d 	bl	8000e8c <_sbrk_r>
 8000b72:	4581      	cmp	r9, r0
 8000b74:	d13f      	bne.n	8000bf6 <_malloc_r+0xe6>
 8000b76:	6821      	ldr	r1, [r4, #0]
 8000b78:	1a6d      	subs	r5, r5, r1
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	4638      	mov	r0, r7
 8000b7e:	f7ff ffa7 	bl	8000ad0 <sbrk_aligned>
 8000b82:	3001      	adds	r0, #1
 8000b84:	d037      	beq.n	8000bf6 <_malloc_r+0xe6>
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	442b      	add	r3, r5
 8000b8a:	6023      	str	r3, [r4, #0]
 8000b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d038      	beq.n	8000c06 <_malloc_r+0xf6>
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	42a2      	cmp	r2, r4
 8000b98:	d12b      	bne.n	8000bf2 <_malloc_r+0xe2>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	e00f      	b.n	8000bc0 <_malloc_r+0xb0>
 8000ba0:	6822      	ldr	r2, [r4, #0]
 8000ba2:	1b52      	subs	r2, r2, r5
 8000ba4:	d41f      	bmi.n	8000be6 <_malloc_r+0xd6>
 8000ba6:	2a0b      	cmp	r2, #11
 8000ba8:	d917      	bls.n	8000bda <_malloc_r+0xca>
 8000baa:	1961      	adds	r1, r4, r5
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	6025      	str	r5, [r4, #0]
 8000bb0:	bf18      	it	ne
 8000bb2:	6059      	strne	r1, [r3, #4]
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	bf08      	it	eq
 8000bb8:	f8c8 1000 	streq.w	r1, [r8]
 8000bbc:	5162      	str	r2, [r4, r5]
 8000bbe:	604b      	str	r3, [r1, #4]
 8000bc0:	4638      	mov	r0, r7
 8000bc2:	f104 060b 	add.w	r6, r4, #11
 8000bc6:	f000 f829 	bl	8000c1c <__malloc_unlock>
 8000bca:	f026 0607 	bic.w	r6, r6, #7
 8000bce:	1d23      	adds	r3, r4, #4
 8000bd0:	1af2      	subs	r2, r6, r3
 8000bd2:	d0ae      	beq.n	8000b32 <_malloc_r+0x22>
 8000bd4:	1b9b      	subs	r3, r3, r6
 8000bd6:	50a3      	str	r3, [r4, r2]
 8000bd8:	e7ab      	b.n	8000b32 <_malloc_r+0x22>
 8000bda:	42a3      	cmp	r3, r4
 8000bdc:	6862      	ldr	r2, [r4, #4]
 8000bde:	d1dd      	bne.n	8000b9c <_malloc_r+0x8c>
 8000be0:	f8c8 2000 	str.w	r2, [r8]
 8000be4:	e7ec      	b.n	8000bc0 <_malloc_r+0xb0>
 8000be6:	4623      	mov	r3, r4
 8000be8:	6864      	ldr	r4, [r4, #4]
 8000bea:	e7ac      	b.n	8000b46 <_malloc_r+0x36>
 8000bec:	4634      	mov	r4, r6
 8000bee:	6876      	ldr	r6, [r6, #4]
 8000bf0:	e7b4      	b.n	8000b5c <_malloc_r+0x4c>
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	e7cc      	b.n	8000b90 <_malloc_r+0x80>
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	f000 f80e 	bl	8000c1c <__malloc_unlock>
 8000c00:	e797      	b.n	8000b32 <_malloc_r+0x22>
 8000c02:	6025      	str	r5, [r4, #0]
 8000c04:	e7dc      	b.n	8000bc0 <_malloc_r+0xb0>
 8000c06:	605b      	str	r3, [r3, #4]
 8000c08:	deff      	udf	#255	; 0xff
 8000c0a:	bf00      	nop
 8000c0c:	200001c8 	.word	0x200001c8

08000c10 <__malloc_lock>:
 8000c10:	4801      	ldr	r0, [pc, #4]	; (8000c18 <__malloc_lock+0x8>)
 8000c12:	f7ff bf0e 	b.w	8000a32 <__retarget_lock_acquire_recursive>
 8000c16:	bf00      	nop
 8000c18:	200001c4 	.word	0x200001c4

08000c1c <__malloc_unlock>:
 8000c1c:	4801      	ldr	r0, [pc, #4]	; (8000c24 <__malloc_unlock+0x8>)
 8000c1e:	f7ff bf09 	b.w	8000a34 <__retarget_lock_release_recursive>
 8000c22:	bf00      	nop
 8000c24:	200001c4 	.word	0x200001c4

08000c28 <__sflush_r>:
 8000c28:	898a      	ldrh	r2, [r1, #12]
 8000c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c2e:	4605      	mov	r5, r0
 8000c30:	0710      	lsls	r0, r2, #28
 8000c32:	460c      	mov	r4, r1
 8000c34:	d458      	bmi.n	8000ce8 <__sflush_r+0xc0>
 8000c36:	684b      	ldr	r3, [r1, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	dc05      	bgt.n	8000c48 <__sflush_r+0x20>
 8000c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dc02      	bgt.n	8000c48 <__sflush_r+0x20>
 8000c42:	2000      	movs	r0, #0
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0f9      	beq.n	8000c42 <__sflush_r+0x1a>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c54:	682f      	ldr	r7, [r5, #0]
 8000c56:	6a21      	ldr	r1, [r4, #32]
 8000c58:	602b      	str	r3, [r5, #0]
 8000c5a:	d032      	beq.n	8000cc2 <__sflush_r+0x9a>
 8000c5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c5e:	89a3      	ldrh	r3, [r4, #12]
 8000c60:	075a      	lsls	r2, r3, #29
 8000c62:	d505      	bpl.n	8000c70 <__sflush_r+0x48>
 8000c64:	6863      	ldr	r3, [r4, #4]
 8000c66:	1ac0      	subs	r0, r0, r3
 8000c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c6a:	b10b      	cbz	r3, 8000c70 <__sflush_r+0x48>
 8000c6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c6e:	1ac0      	subs	r0, r0, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	4602      	mov	r2, r0
 8000c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c76:	6a21      	ldr	r1, [r4, #32]
 8000c78:	4628      	mov	r0, r5
 8000c7a:	47b0      	blx	r6
 8000c7c:	1c43      	adds	r3, r0, #1
 8000c7e:	89a3      	ldrh	r3, [r4, #12]
 8000c80:	d106      	bne.n	8000c90 <__sflush_r+0x68>
 8000c82:	6829      	ldr	r1, [r5, #0]
 8000c84:	291d      	cmp	r1, #29
 8000c86:	d82b      	bhi.n	8000ce0 <__sflush_r+0xb8>
 8000c88:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <__sflush_r+0x108>)
 8000c8a:	410a      	asrs	r2, r1
 8000c8c:	07d6      	lsls	r6, r2, #31
 8000c8e:	d427      	bmi.n	8000ce0 <__sflush_r+0xb8>
 8000c90:	2200      	movs	r2, #0
 8000c92:	6062      	str	r2, [r4, #4]
 8000c94:	04d9      	lsls	r1, r3, #19
 8000c96:	6922      	ldr	r2, [r4, #16]
 8000c98:	6022      	str	r2, [r4, #0]
 8000c9a:	d504      	bpl.n	8000ca6 <__sflush_r+0x7e>
 8000c9c:	1c42      	adds	r2, r0, #1
 8000c9e:	d101      	bne.n	8000ca4 <__sflush_r+0x7c>
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	b903      	cbnz	r3, 8000ca6 <__sflush_r+0x7e>
 8000ca4:	6560      	str	r0, [r4, #84]	; 0x54
 8000ca6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ca8:	602f      	str	r7, [r5, #0]
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d0c9      	beq.n	8000c42 <__sflush_r+0x1a>
 8000cae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d002      	beq.n	8000cbc <__sflush_r+0x94>
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f7ff febe 	bl	8000a38 <_free_r>
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	6360      	str	r0, [r4, #52]	; 0x34
 8000cc0:	e7c0      	b.n	8000c44 <__sflush_r+0x1c>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	47b0      	blx	r6
 8000cc8:	1c41      	adds	r1, r0, #1
 8000cca:	d1c8      	bne.n	8000c5e <__sflush_r+0x36>
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0c5      	beq.n	8000c5e <__sflush_r+0x36>
 8000cd2:	2b1d      	cmp	r3, #29
 8000cd4:	d001      	beq.n	8000cda <__sflush_r+0xb2>
 8000cd6:	2b16      	cmp	r3, #22
 8000cd8:	d101      	bne.n	8000cde <__sflush_r+0xb6>
 8000cda:	602f      	str	r7, [r5, #0]
 8000cdc:	e7b1      	b.n	8000c42 <__sflush_r+0x1a>
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	81a3      	strh	r3, [r4, #12]
 8000ce6:	e7ad      	b.n	8000c44 <__sflush_r+0x1c>
 8000ce8:	690f      	ldr	r7, [r1, #16]
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d0a9      	beq.n	8000c42 <__sflush_r+0x1a>
 8000cee:	0793      	lsls	r3, r2, #30
 8000cf0:	680e      	ldr	r6, [r1, #0]
 8000cf2:	bf08      	it	eq
 8000cf4:	694b      	ldreq	r3, [r1, #20]
 8000cf6:	600f      	str	r7, [r1, #0]
 8000cf8:	bf18      	it	ne
 8000cfa:	2300      	movne	r3, #0
 8000cfc:	eba6 0807 	sub.w	r8, r6, r7
 8000d00:	608b      	str	r3, [r1, #8]
 8000d02:	f1b8 0f00 	cmp.w	r8, #0
 8000d06:	dd9c      	ble.n	8000c42 <__sflush_r+0x1a>
 8000d08:	6a21      	ldr	r1, [r4, #32]
 8000d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	463a      	mov	r2, r7
 8000d10:	4628      	mov	r0, r5
 8000d12:	47b0      	blx	r6
 8000d14:	2800      	cmp	r0, #0
 8000d16:	dc06      	bgt.n	8000d26 <__sflush_r+0xfe>
 8000d18:	89a3      	ldrh	r3, [r4, #12]
 8000d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1e:	81a3      	strh	r3, [r4, #12]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d24:	e78e      	b.n	8000c44 <__sflush_r+0x1c>
 8000d26:	4407      	add	r7, r0
 8000d28:	eba8 0800 	sub.w	r8, r8, r0
 8000d2c:	e7e9      	b.n	8000d02 <__sflush_r+0xda>
 8000d2e:	bf00      	nop
 8000d30:	dfbffffe 	.word	0xdfbffffe

08000d34 <_fflush_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	690b      	ldr	r3, [r1, #16]
 8000d38:	4605      	mov	r5, r0
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	b913      	cbnz	r3, 8000d44 <_fflush_r+0x10>
 8000d3e:	2500      	movs	r5, #0
 8000d40:	4628      	mov	r0, r5
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
 8000d44:	b118      	cbz	r0, 8000d4e <_fflush_r+0x1a>
 8000d46:	6a03      	ldr	r3, [r0, #32]
 8000d48:	b90b      	cbnz	r3, 8000d4e <_fflush_r+0x1a>
 8000d4a:	f7ff fc8f 	bl	800066c <__sinit>
 8000d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f3      	beq.n	8000d3e <_fflush_r+0xa>
 8000d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d58:	07d0      	lsls	r0, r2, #31
 8000d5a:	d404      	bmi.n	8000d66 <_fflush_r+0x32>
 8000d5c:	0599      	lsls	r1, r3, #22
 8000d5e:	d402      	bmi.n	8000d66 <_fflush_r+0x32>
 8000d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d62:	f7ff fe66 	bl	8000a32 <__retarget_lock_acquire_recursive>
 8000d66:	4628      	mov	r0, r5
 8000d68:	4621      	mov	r1, r4
 8000d6a:	f7ff ff5d 	bl	8000c28 <__sflush_r>
 8000d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d70:	07da      	lsls	r2, r3, #31
 8000d72:	4605      	mov	r5, r0
 8000d74:	d4e4      	bmi.n	8000d40 <_fflush_r+0xc>
 8000d76:	89a3      	ldrh	r3, [r4, #12]
 8000d78:	059b      	lsls	r3, r3, #22
 8000d7a:	d4e1      	bmi.n	8000d40 <_fflush_r+0xc>
 8000d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d7e:	f7ff fe59 	bl	8000a34 <__retarget_lock_release_recursive>
 8000d82:	e7dd      	b.n	8000d40 <_fflush_r+0xc>

08000d84 <__swhatbuf_r>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	460c      	mov	r4, r1
 8000d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	b096      	sub	sp, #88	; 0x58
 8000d90:	4615      	mov	r5, r2
 8000d92:	461e      	mov	r6, r3
 8000d94:	da0d      	bge.n	8000db2 <__swhatbuf_r+0x2e>
 8000d96:	89a3      	ldrh	r3, [r4, #12]
 8000d98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d9c:	f04f 0100 	mov.w	r1, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000da6:	2340      	movne	r3, #64	; 0x40
 8000da8:	2000      	movs	r0, #0
 8000daa:	6031      	str	r1, [r6, #0]
 8000dac:	602b      	str	r3, [r5, #0]
 8000dae:	b016      	add	sp, #88	; 0x58
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
 8000db2:	466a      	mov	r2, sp
 8000db4:	f000 f848 	bl	8000e48 <_fstat_r>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	dbec      	blt.n	8000d96 <__swhatbuf_r+0x12>
 8000dbc:	9901      	ldr	r1, [sp, #4]
 8000dbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000dc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000dc6:	4259      	negs	r1, r3
 8000dc8:	4159      	adcs	r1, r3
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	e7eb      	b.n	8000da8 <__swhatbuf_r+0x24>

08000dd0 <__smakebuf_r>:
 8000dd0:	898b      	ldrh	r3, [r1, #12]
 8000dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dd4:	079d      	lsls	r5, r3, #30
 8000dd6:	4606      	mov	r6, r0
 8000dd8:	460c      	mov	r4, r1
 8000dda:	d507      	bpl.n	8000dec <__smakebuf_r+0x1c>
 8000ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	6123      	str	r3, [r4, #16]
 8000de4:	2301      	movs	r3, #1
 8000de6:	6163      	str	r3, [r4, #20]
 8000de8:	b002      	add	sp, #8
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	ab01      	add	r3, sp, #4
 8000dee:	466a      	mov	r2, sp
 8000df0:	f7ff ffc8 	bl	8000d84 <__swhatbuf_r>
 8000df4:	9900      	ldr	r1, [sp, #0]
 8000df6:	4605      	mov	r5, r0
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f7ff fe89 	bl	8000b10 <_malloc_r>
 8000dfe:	b948      	cbnz	r0, 8000e14 <__smakebuf_r+0x44>
 8000e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e04:	059a      	lsls	r2, r3, #22
 8000e06:	d4ef      	bmi.n	8000de8 <__smakebuf_r+0x18>
 8000e08:	f023 0303 	bic.w	r3, r3, #3
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	81a3      	strh	r3, [r4, #12]
 8000e12:	e7e3      	b.n	8000ddc <__smakebuf_r+0xc>
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	6020      	str	r0, [r4, #0]
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	81a3      	strh	r3, [r4, #12]
 8000e1e:	9b00      	ldr	r3, [sp, #0]
 8000e20:	6163      	str	r3, [r4, #20]
 8000e22:	9b01      	ldr	r3, [sp, #4]
 8000e24:	6120      	str	r0, [r4, #16]
 8000e26:	b15b      	cbz	r3, 8000e40 <__smakebuf_r+0x70>
 8000e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	f000 f81d 	bl	8000e6c <_isatty_r>
 8000e32:	b128      	cbz	r0, 8000e40 <__smakebuf_r+0x70>
 8000e34:	89a3      	ldrh	r3, [r4, #12]
 8000e36:	f023 0303 	bic.w	r3, r3, #3
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	81a3      	strh	r3, [r4, #12]
 8000e40:	89a3      	ldrh	r3, [r4, #12]
 8000e42:	431d      	orrs	r5, r3
 8000e44:	81a5      	strh	r5, [r4, #12]
 8000e46:	e7cf      	b.n	8000de8 <__smakebuf_r+0x18>

08000e48 <_fstat_r>:
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	4d07      	ldr	r5, [pc, #28]	; (8000e68 <_fstat_r+0x20>)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	602b      	str	r3, [r5, #0]
 8000e56:	f7ff fa38 	bl	80002ca <_fstat>
 8000e5a:	1c43      	adds	r3, r0, #1
 8000e5c:	d102      	bne.n	8000e64 <_fstat_r+0x1c>
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	b103      	cbz	r3, 8000e64 <_fstat_r+0x1c>
 8000e62:	6023      	str	r3, [r4, #0]
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
 8000e66:	bf00      	nop
 8000e68:	200001c0 	.word	0x200001c0

08000e6c <_isatty_r>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4d06      	ldr	r5, [pc, #24]	; (8000e88 <_isatty_r+0x1c>)
 8000e70:	2300      	movs	r3, #0
 8000e72:	4604      	mov	r4, r0
 8000e74:	4608      	mov	r0, r1
 8000e76:	602b      	str	r3, [r5, #0]
 8000e78:	f7ff fa37 	bl	80002ea <_isatty>
 8000e7c:	1c43      	adds	r3, r0, #1
 8000e7e:	d102      	bne.n	8000e86 <_isatty_r+0x1a>
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	b103      	cbz	r3, 8000e86 <_isatty_r+0x1a>
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	bd38      	pop	{r3, r4, r5, pc}
 8000e88:	200001c0 	.word	0x200001c0

08000e8c <_sbrk_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4d06      	ldr	r5, [pc, #24]	; (8000ea8 <_sbrk_r+0x1c>)
 8000e90:	2300      	movs	r3, #0
 8000e92:	4604      	mov	r4, r0
 8000e94:	4608      	mov	r0, r1
 8000e96:	602b      	str	r3, [r5, #0]
 8000e98:	f7ff fa40 	bl	800031c <_sbrk>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk_r+0x1a>
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	b103      	cbz	r3, 8000ea6 <_sbrk_r+0x1a>
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	200001c0 	.word	0x200001c0

08000eac <_init>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	bf00      	nop
 8000eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb2:	bc08      	pop	{r3}
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	4770      	bx	lr

08000eb8 <_fini>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr
