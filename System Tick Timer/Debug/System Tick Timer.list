
System Tick Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003d4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001357  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000058a  00000000  00000000  000213ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00021b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e0a  00000000  00000000  00021c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002422  00000000  00000000  00035a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e739  00000000  00000000  00037eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000560  00000000  00000000  000b65e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b6b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003b0 	.word	0x080003b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080003b0 	.word	0x080003b0

080001d8 <main>:

#define GPIOAEN (1U << 0)
#define PIN5 	(1U << 5)
#define LED_PIN PIN5

int main() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// enable GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <main+0x40>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <main+0x40>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	// set input mode on PIN5
	GPIOA->MODER |= (1U << 10);
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <main+0x44>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <main+0x44>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <main+0x44>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <main+0x44>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	while (1) {
		// toggle LED pin
		GPIOA->ODR ^= LED_PIN;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <main+0x44>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	4a05      	ldr	r2, [pc, #20]	; (800021c <main+0x44>)
 8000206:	f083 0320 	eor.w	r3, r3, #32
 800020a:	6153      	str	r3, [r2, #20]
		systickDelayMs(1000);
 800020c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000210:	f000 f842 	bl	8000298 <systickDelayMs>
		GPIOA->ODR ^= LED_PIN;
 8000214:	e7f4      	b.n	8000200 <main+0x28>
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	40020000 	.word	0x40020000

08000220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000224:	e7fe      	b.n	8000224 <NMI_Handler+0x4>

08000226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000226:	b480      	push	{r7}
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800022a:	e7fe      	b.n	800022a <HardFault_Handler+0x4>

0800022c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000230:	e7fe      	b.n	8000230 <MemManage_Handler+0x4>

08000232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000232:	b480      	push	{r7}
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000236:	e7fe      	b.n	8000236 <BusFault_Handler+0x4>

08000238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800023c:	e7fe      	b.n	800023c <UsageFault_Handler+0x4>

0800023e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr

0800025a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800026c:	f000 f868 	bl	8000340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}

08000274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <SystemInit+0x20>)
 800027a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800027e:	4a05      	ldr	r2, [pc, #20]	; (8000294 <SystemInit+0x20>)
 8000280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <systickDelayMs>:
#define SYSTICK_LOAD_VAL 	16000
#define CTRL_ENABLE			(1U << 0)
#define CTRL_CLKSRC			(1U << 2)
#define CTRL_COUNTFLAG		(1U << 16)

void systickDelayMs(int n) {
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	// configure reload value register
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <systickDelayMs+0x50>)
 80002a2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002a6:	605a      	str	r2, [r3, #4]

	// clear current value register
	SysTick->VAL = 0;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <systickDelayMs+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]

	// enable SYSTICK and select clock source
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <systickDelayMs+0x50>)
 80002b0:	2205      	movs	r2, #5
 80002b2:	601a      	str	r2, [r3, #0]

	// delay loop
	for (int i = 0; i < n; i++) {
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e009      	b.n	80002ce <systickDelayMs+0x36>
		while (!(SysTick->CTRL & CTRL_COUNTFLAG));
 80002ba:	bf00      	nop
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <systickDelayMs+0x50>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <systickDelayMs+0x24>
	for (int i = 0; i < n; i++) {
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	dbf1      	blt.n	80002ba <systickDelayMs+0x22>
	}

	// disable SYSTICK
	SysTick->CTRL = 0;
 80002d6:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <systickDelayMs+0x50>)
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000e010 	.word	0xe000e010

080002ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002f2:	490e      	ldr	r1, [pc, #56]	; (800032c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000308:	4c0b      	ldr	r4, [pc, #44]	; (8000338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000316:	f7ff ffad 	bl	8000274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800031a:	f000 f825 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800031e:	f7ff ff5b 	bl	80001d8 <main>
  bx  lr    
 8000322:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000330:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 8000334:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000338:	20000024 	.word	0x20000024

0800033c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <HAL_IncTick+0x20>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_IncTick+0x24>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4413      	add	r3, r2
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <HAL_IncTick+0x24>)
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000000 	.word	0x20000000
 8000364:	20000020 	.word	0x20000020

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
