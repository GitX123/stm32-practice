
Interrupt UART RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000368  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000500  08000500  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000500  08000500  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000500  08000500  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000500  08000500  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000508  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  0800050c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800050c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a61  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006a8  00000000  00000000  00021ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00022180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016a  00000000  00000000  00022388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e47  00000000  00000000  000224f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000024c7  00000000  00000000  00036339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e862  00000000  00000000  00038800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000604  00000000  00000000  000b7064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b7668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004e8 	.word	0x080004e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004e8 	.word	0x080004e8

080001d8 <main>:
#define LED_PIN GPIOA_5

char key;
static void uart_callback();

int main() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// enable output LED pin
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <main+0x30>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a09      	ldr	r2, [pc, #36]	; (8000208 <main+0x30>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (1U << 10);
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <main+0x34>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <main+0x34>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0x34>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x34>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	uart2_rx_interrupt_init();
 8000200:	f000 f892 	bl	8000328 <uart2_rx_interrupt_init>

	while (1) {
 8000204:	e7fe      	b.n	8000204 <main+0x2c>
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000

08000210 <uart_callback>:
	}

	return 0;
}

static void uart_callback() {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	key = USART2->DR;
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <uart_callback+0x3c>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <uart_callback+0x40>)
 800021c:	701a      	strb	r2, [r3, #0]
	if (key == '1') {
 800021e:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <uart_callback+0x40>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b31      	cmp	r3, #49	; 0x31
 8000224:	d106      	bne.n	8000234 <uart_callback+0x24>
		GPIOA->ODR |= LED_PIN;
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <uart_callback+0x44>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <uart_callback+0x44>)
 800022c:	f043 0320 	orr.w	r3, r3, #32
 8000230:	6153      	str	r3, [r2, #20]
	} else {
		GPIOA->ODR &= ~LED_PIN;
	}
}
 8000232:	e005      	b.n	8000240 <uart_callback+0x30>
		GPIOA->ODR &= ~LED_PIN;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <uart_callback+0x44>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a06      	ldr	r2, [pc, #24]	; (8000254 <uart_callback+0x44>)
 800023a:	f023 0320 	bic.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40004400 	.word	0x40004400
 8000250:	20000020 	.word	0x20000020
 8000254:	40020000 	.word	0x40020000

08000258 <USART2_IRQHandler>:

void USART2_IRQHandler() {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	// check if RX buffer is not empty
	if (USART2->SR & SR_RXNE) {
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <USART2_IRQHandler+0x18>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <USART2_IRQHandler+0x14>
		uart_callback();
 8000268:	f7ff ffd2 	bl	8000210 <uart_callback>
	}
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40004400 	.word	0x40004400

08000274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000278:	e7fe      	b.n	8000278 <NMI_Handler+0x4>

0800027a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800027e:	e7fe      	b.n	800027e <HardFault_Handler+0x4>

08000280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000284:	e7fe      	b.n	8000284 <MemManage_Handler+0x4>

08000286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800028a:	e7fe      	b.n	800028a <BusFault_Handler+0x4>

0800028c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000290:	e7fe      	b.n	8000290 <UsageFault_Handler+0x4>

08000292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c0:	f000 f8da 	bl	8000478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <SystemInit+0x20>)
 80002ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d2:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <SystemInit+0x20>)
 80002d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	db0b      	blt.n	8000316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 021f 	and.w	r2, r3, #31
 8000304:	4907      	ldr	r1, [pc, #28]	; (8000324 <__NVIC_EnableIRQ+0x38>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	095b      	lsrs	r3, r3, #5
 800030c:	2001      	movs	r0, #1
 800030e:	fa00 f202 	lsl.w	r2, r0, r2
 8000312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e100 	.word	0xe000e100

08000328 <uart2_rx_interrupt_init>:
#define UART_BAUDRATE	115200

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_rx_interrupt_init() {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032c:	b672      	cpsid	i
}
 800032e:	bf00      	nop
	__disable_irq();
	/* configure GPIO */
	// enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <uart2_rx_interrupt_init+0xa0>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a24      	ldr	r2, [pc, #144]	; (80003c8 <uart2_rx_interrupt_init+0xa0>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	; 0x30

	// set PA3 mode to alternate function mode
	GPIOA->MODER &= ~(1U << 6);
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 8000342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000346:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 800034e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000352:	6013      	str	r3, [r2, #0]

	// set PA3 alternate function type to UART_RX (AF07)
	GPIOA->AFR[0] |= (1U << 12);
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 8000356:	6a1b      	ldr	r3, [r3, #32]
 8000358:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 800035a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800035e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	4a19      	ldr	r2, [pc, #100]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 8000366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800036a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4a16      	ldr	r2, [pc, #88]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 8000372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000376:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 15);
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <uart2_rx_interrupt_init+0xa4>)
 800037e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000382:	6213      	str	r3, [r2, #32]

	/* configure UART module */
	// enable clock access to UART2
	RCC->APB1ENR |= UART2EN;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <uart2_rx_interrupt_init+0xa0>)
 8000386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <uart2_rx_interrupt_init+0xa0>)
 800038a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800038e:	6413      	str	r3, [r2, #64]	; 0x40

	// configure baud rate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	490e      	ldr	r1, [pc, #56]	; (80003d0 <uart2_rx_interrupt_init+0xa8>)
 8000396:	480f      	ldr	r0, [pc, #60]	; (80003d4 <uart2_rx_interrupt_init+0xac>)
 8000398:	f000 f81e 	bl	80003d8 <uart_set_baudrate>

	// configure transfer direction
	USART2->CR1 =  CR1_RE;
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <uart2_rx_interrupt_init+0xac>)
 800039e:	2204      	movs	r2, #4
 80003a0:	60da      	str	r2, [r3, #12]

	// enable RXNE interrupt
	USART2->CR1 |= CR1_RXNEIE;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <uart2_rx_interrupt_init+0xac>)
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <uart2_rx_interrupt_init+0xac>)
 80003a8:	f043 0320 	orr.w	r3, r3, #32
 80003ac:	60d3      	str	r3, [r2, #12]

	// enable UART2 interrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 80003ae:	2026      	movs	r0, #38	; 0x26
 80003b0:	f7ff ff9c 	bl	80002ec <__NVIC_EnableIRQ>

	// enable UART2 module'
	USART2->CR1 |= CR1_UE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <uart2_rx_interrupt_init+0xac>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <uart2_rx_interrupt_init+0xac>)
 80003ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003be:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80003c0:	b662      	cpsie	i
}
 80003c2:	bf00      	nop
	__enable_irq();
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020000 	.word	0x40020000
 80003d0:	00f42400 	.word	0x00f42400
 80003d4:	40004400 	.word	0x40004400

080003d8 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80003e4:	6879      	ldr	r1, [r7, #4]
 80003e6:	68b8      	ldr	r0, [r7, #8]
 80003e8:	f000 f808 	bl	80003fc <compute_uart_bd>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	609a      	str	r2, [r3, #8]
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	085a      	lsrs	r2, r3, #1
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	441a      	add	r2, r3
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	fbb2 f3f3 	udiv	r3, r2, r3
 8000414:	b29b      	uxth	r3, r3
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800042a:	490e      	ldr	r1, [pc, #56]	; (8000464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800042c:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000440:	4c0b      	ldr	r4, [pc, #44]	; (8000470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800044e:	f7ff ff3b 	bl	80002c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f000 f825 	bl	80004a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000456:	f7ff febf 	bl	80001d8 <main>
  bx  lr    
 800045a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800045c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000468:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 800046c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000470:	20000028 	.word	0x20000028

08000474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>
	...

08000478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_IncTick+0x20>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_IncTick+0x24>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4413      	add	r3, r2
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <HAL_IncTick+0x24>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000000 	.word	0x20000000
 800049c:	20000024 	.word	0x20000024

080004a0 <__libc_init_array>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	4d0d      	ldr	r5, [pc, #52]	; (80004d8 <__libc_init_array+0x38>)
 80004a4:	4c0d      	ldr	r4, [pc, #52]	; (80004dc <__libc_init_array+0x3c>)
 80004a6:	1b64      	subs	r4, r4, r5
 80004a8:	10a4      	asrs	r4, r4, #2
 80004aa:	2600      	movs	r6, #0
 80004ac:	42a6      	cmp	r6, r4
 80004ae:	d109      	bne.n	80004c4 <__libc_init_array+0x24>
 80004b0:	4d0b      	ldr	r5, [pc, #44]	; (80004e0 <__libc_init_array+0x40>)
 80004b2:	4c0c      	ldr	r4, [pc, #48]	; (80004e4 <__libc_init_array+0x44>)
 80004b4:	f000 f818 	bl	80004e8 <_init>
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	10a4      	asrs	r4, r4, #2
 80004bc:	2600      	movs	r6, #0
 80004be:	42a6      	cmp	r6, r4
 80004c0:	d105      	bne.n	80004ce <__libc_init_array+0x2e>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c8:	4798      	blx	r3
 80004ca:	3601      	adds	r6, #1
 80004cc:	e7ee      	b.n	80004ac <__libc_init_array+0xc>
 80004ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d2:	4798      	blx	r3
 80004d4:	3601      	adds	r6, #1
 80004d6:	e7f2      	b.n	80004be <__libc_init_array+0x1e>
 80004d8:	08000500 	.word	0x08000500
 80004dc:	08000500 	.word	0x08000500
 80004e0:	08000500 	.word	0x08000500
 80004e4:	08000504 	.word	0x08000504

080004e8 <_init>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr

080004f4 <_fini>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr
