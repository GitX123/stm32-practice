
blueNRG Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a54  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf8  08004cf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000070  08004d70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08004d70  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001585c  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d74  00000000  00000000  0003593f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  000386b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfa  00000000  00000000  00039750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019959  00000000  00000000  0003a44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ac6  00000000  00000000  00053da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000927fd  00000000  00000000  00068869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bb0  00000000  00000000  000fb068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ffc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004bd4 	.word	0x08004bd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004bd4 	.word	0x08004bd4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004e8:	2006      	movs	r0, #6
 80004ea:	f001 f81c 	bl	8001526 <HAL_NVIC_EnableIRQ>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004f6:	2006      	movs	r0, #6
 80004f8:	f001 f823 	bl	8001542 <HAL_NVIC_DisableIRQ>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <HCI_TL_SPI_Init+0x90>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000510:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <HCI_TL_SPI_Init+0x90>)
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	6313      	str	r3, [r2, #48]	; 0x30
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <HCI_TL_SPI_Init+0x90>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000524:	2301      	movs	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000528:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4619      	mov	r1, r3
 8000538:	4816      	ldr	r0, [pc, #88]	; (8000594 <HCI_TL_SPI_Init+0x94>)
 800053a:	f001 f86f 	bl	800161c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800053e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480f      	ldr	r0, [pc, #60]	; (8000594 <HCI_TL_SPI_Init+0x94>)
 8000558:	f001 f860 	bl	800161c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800055c:	2302      	movs	r3, #2
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <HCI_TL_SPI_Init+0x94>)
 8000574:	f001 f852 	bl	800161c <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2102      	movs	r1, #2
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <HCI_TL_SPI_Init+0x94>)
 800057e:	f001 facd 	bl	8001b1c <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000582:	f000 fa2f 	bl	80009e4 <BSP_SPI1_Init>
 8000586:	4603      	mov	r3, r0
}
 8000588:	4618      	mov	r0, r3
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40023800 	.word	0x40023800
 8000594:	40020000 	.word	0x40020000

08000598 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800059c:	2101      	movs	r1, #1
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <HCI_TL_SPI_DeInit+0x24>)
 80005a0:	f001 f9c0 	bl	8001924 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80005a4:	2102      	movs	r1, #2
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <HCI_TL_SPI_DeInit+0x24>)
 80005a8:	f001 f9bc 	bl	8001924 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <HCI_TL_SPI_DeInit+0x24>)
 80005b2:	f001 f9b7 	bl	8001924 <HAL_GPIO_DeInit>
  return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40020000 	.word	0x40020000

080005c0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2102      	movs	r1, #2
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HCI_TL_SPI_Reset+0x38>)
 80005ca:	f001 faa7 	bl	8001b1c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <HCI_TL_SPI_Reset+0x38>)
 80005d6:	f001 faa1 	bl	8001b1c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005da:	2005      	movs	r0, #5
 80005dc:	f000 fe64 	bl	80012a8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <HCI_TL_SPI_Reset+0x38>)
 80005e8:	f001 fa98 	bl	8001b1c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005ec:	2005      	movs	r0, #5
 80005ee:	f000 fe5b 	bl	80012a8 <HAL_Delay>
  return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020000 	.word	0x40020000

080005fc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800060c:	2300      	movs	r3, #0
 800060e:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000610:	4a30      	ldr	r2, [pc, #192]	; (80006d4 <HCI_TL_SPI_Receive+0xd8>)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061a:	6018      	str	r0, [r3, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8000620:	f7ff ff67 	bl	80004f2 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	482b      	ldr	r0, [pc, #172]	; (80006d8 <HCI_TL_SPI_Receive+0xdc>)
 800062a:	f001 fa77 	bl	8001b1c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800062e:	f107 0108 	add.w	r1, r7, #8
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	2205      	movs	r2, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa03 	bl	8000a44 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 800063e:	7b3b      	ldrb	r3, [r7, #12]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	b21a      	sxth	r2, r3
 8000644:	7afb      	ldrb	r3, [r7, #11]
 8000646:	b21b      	sxth	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 800064e:	8bfb      	ldrh	r3, [r7, #30]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d01e      	beq.n	8000692 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000654:	8bfa      	ldrh	r2, [r7, #30]
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	429a      	cmp	r2, r3
 800065a:	d901      	bls.n	8000660 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 800065c:	887b      	ldrh	r3, [r7, #2]
 800065e:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000660:	2300      	movs	r3, #0
 8000662:	777b      	strb	r3, [r7, #29]
 8000664:	e010      	b.n	8000688 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000666:	f107 0116 	add.w	r1, r7, #22
 800066a:	f107 0317 	add.w	r3, r7, #23
 800066e:	2201      	movs	r2, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f9e7 	bl	8000a44 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000676:	7f7b      	ldrb	r3, [r7, #29]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	7dba      	ldrb	r2, [r7, #22]
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000682:	7f7b      	ldrb	r3, [r7, #29]
 8000684:	3301      	adds	r3, #1
 8000686:	777b      	strb	r3, [r7, #29]
 8000688:	7f7b      	ldrb	r3, [r7, #29]
 800068a:	b29b      	uxth	r3, r3
 800068c:	8bfa      	ldrh	r2, [r7, #30]
 800068e:	429a      	cmp	r2, r3
 8000690:	d8e9      	bhi.n	8000666 <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8000692:	f000 fdfd 	bl	8001290 <HAL_GetTick>
 8000696:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000698:	e006      	b.n	80006a8 <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800069a:	2101      	movs	r1, #1
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <HCI_TL_SPI_Receive+0xdc>)
 800069e:	f001 fa25 	bl	8001aec <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d008      	beq.n	80006ba <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80006a8:	f000 fdf2 	bl	8001290 <HAL_GetTick>
 80006ac:	4602      	mov	r2, r0
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b6:	d3f0      	bcc.n	800069a <HCI_TL_SPI_Receive+0x9e>
 80006b8:	e000      	b.n	80006bc <HCI_TL_SPI_Receive+0xc0>
      break;
 80006ba:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80006bc:	f7ff ff12 	bl	80004e4 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2102      	movs	r1, #2
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <HCI_TL_SPI_Receive+0xdc>)
 80006c6:	f001 fa29 	bl	8001b1c <HAL_GPIO_WritePin>

  return len;
 80006ca:	7f7b      	ldrb	r3, [r7, #29]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08004bec 	.word	0x08004bec
 80006d8:	40020000 	.word	0x40020000

080006dc <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006e8:	4a3f      	ldr	r2, [pc, #252]	; (80007e8 <HCI_TL_SPI_Send+0x10c>)
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f2:	6018      	str	r0, [r3, #0]
 80006f4:	3304      	adds	r3, #4
 80006f6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006f8:	f000 fdca 	bl	8001290 <HAL_GetTick>
 80006fc:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80006fe:	f7ff fef8 	bl	80004f2 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8000702:	f000 fdc5 	bl	8001290 <HAL_GetTick>
 8000706:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	4836      	ldr	r0, [pc, #216]	; (80007ec <HCI_TL_SPI_Send+0x110>)
 8000712:	f001 fa03 	bl	8001b1c <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000716:	e00a      	b.n	800072e <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000718:	f000 fdba 	bl	8001290 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b64      	cmp	r3, #100	; 0x64
 8000724:	d903      	bls.n	800072e <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000726:	f06f 0302 	mvn.w	r3, #2
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800072c:	e004      	b.n	8000738 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 800072e:	f000 f861 	bl	80007f4 <IsDataAvailable>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0ef      	beq.n	8000718 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	f113 0f03 	cmn.w	r3, #3
 800073e:	d105      	bne.n	800074c <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	4829      	ldr	r0, [pc, #164]	; (80007ec <HCI_TL_SPI_Send+0x110>)
 8000746:	f001 f9e9 	bl	8001b1c <HAL_GPIO_WritePin>
      break;
 800074a:	e030      	b.n	80007ae <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800074c:	f107 010c 	add.w	r1, r7, #12
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2205      	movs	r2, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f974 	bl	8000a44 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800075c:	7bbb      	ldrb	r3, [r7, #14]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b21a      	sxth	r2, r3
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	b21b      	sxth	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b21b      	sxth	r3, r3
 800076a:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 800076c:	8b7a      	ldrh	r2, [r7, #26]
 800076e:	887b      	ldrh	r3, [r7, #2]
 8000770:	429a      	cmp	r2, r3
 8000772:	d306      	bcc.n	8000782 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	491d      	ldr	r1, [pc, #116]	; (80007f0 <HCI_TL_SPI_Send+0x114>)
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f962 	bl	8000a44 <BSP_SPI1_SendRecv>
 8000780:	e002      	b.n	8000788 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000782:	f06f 0301 	mvn.w	r3, #1
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2102      	movs	r1, #2
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <HCI_TL_SPI_Send+0x110>)
 800078e:	f001 f9c5 	bl	8001b1c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000792:	f000 fd7d 	bl	8001290 <HAL_GetTick>
 8000796:	4602      	mov	r2, r0
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	2b64      	cmp	r3, #100	; 0x64
 800079e:	d903      	bls.n	80007a8 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 80007a0:	f06f 0302 	mvn.w	r3, #2
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80007a6:	e002      	b.n	80007ae <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dba9      	blt.n	8000702 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80007ae:	f000 fd6f 	bl	8001290 <HAL_GetTick>
 80007b2:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007b4:	e006      	b.n	80007c4 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80007b6:	2101      	movs	r1, #1
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <HCI_TL_SPI_Send+0x110>)
 80007ba:	f001 f997 	bl	8001aec <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007c4:	f000 fd64 	bl	8001290 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007d2:	d3f0      	bcc.n	80007b6 <HCI_TL_SPI_Send+0xda>
 80007d4:	e000      	b.n	80007d8 <HCI_TL_SPI_Send+0xfc>
      break;
 80007d6:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80007d8:	f7ff fe84 	bl	80004e4 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08004bf4 	.word	0x08004bf4
 80007ec:	40020000 	.word	0x40020000
 80007f0:	20000094 	.word	0x20000094

080007f4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f8:	2101      	movs	r1, #1
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <IsDataAvailable+0x1c>)
 80007fc:	f001 f976 	bl	8001aec <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	bf0c      	ite	eq
 8000806:	2301      	moveq	r3, #1
 8000808:	2300      	movne	r3, #0
 800080a:	b2db      	uxtb	r3, r3
}
 800080c:	4618      	mov	r0, r3
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020000 	.word	0x40020000

08000814 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <hci_tl_lowlevel_init+0x54>)
 800081c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <hci_tl_lowlevel_init+0x58>)
 8000820:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <hci_tl_lowlevel_init+0x5c>)
 8000824:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <hci_tl_lowlevel_init+0x60>)
 8000828:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <hci_tl_lowlevel_init+0x64>)
 800082c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <hci_tl_lowlevel_init+0x68>)
 8000830:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fa77 	bl	8003d28 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800083a:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <hci_tl_lowlevel_init+0x6c>)
 8000840:	f000 feb3 	bl	80015aa <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <hci_tl_lowlevel_init+0x70>)
 8000846:	2100      	movs	r1, #0
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <hci_tl_lowlevel_init+0x6c>)
 800084a:	f000 fe94 	bl	8001576 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2006      	movs	r0, #6
 8000854:	f000 fe4b 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000858:	2006      	movs	r0, #6
 800085a:	f000 fe64 	bl	8001526 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	08000501 	.word	0x08000501
 800086c:	08000599 	.word	0x08000599
 8000870:	080006dd 	.word	0x080006dd
 8000874:	080005fd 	.word	0x080005fd
 8000878:	080005c1 	.word	0x080005c1
 800087c:	08000a85 	.word	0x08000a85
 8000880:	2000008c 	.word	0x2000008c
 8000884:	08000889 	.word	0x08000889

08000888 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800088c:	e005      	b.n	800089a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088e:	2000      	movs	r0, #0
 8000890:	f003 fb82 	bl	8003f98 <hci_notify_asynch_evt>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d105      	bne.n	80008a6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800089a:	f7ff ffab 	bl	80007f4 <IsDataAvailable>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f4      	bne.n	800088e <hci_tl_lowlevel_isr+0x6>
 80008a4:	e000      	b.n	80008a8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <bluenrg_init>:
#include "app_bluenrg.h"
#include "service.h"

uint8_t PUBADDR[CONFIG_DATA_PUBADDR_LEN] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x6};

void bluenrg_init() {
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af02      	add	r7, sp, #8
	const char *device_name = "blueNRG2";
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <bluenrg_init+0xc8>)
 80008b4:	617b      	str	r3, [r7, #20]
	uint8_t pubaddr[CONFIG_DATA_PUBADDR_LEN];
	BLUENRG_memcpy(pubaddr, PUBADDR, CONFIG_DATA_PUBADDR_LEN);
 80008b6:	4a30      	ldr	r2, [pc, #192]	; (8000978 <bluenrg_init+0xcc>)
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c0:	6018      	str	r0, [r3, #0]
 80008c2:	3304      	adds	r3, #4
 80008c4:	8019      	strh	r1, [r3, #0]
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
	tBleStatus ret;

	// initialize HCI
	hci_init(NULL, NULL);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f003 f9eb 	bl	8003ca4 <hci_init>

	// reset HCI
	hci_reset();
 80008ce:	f002 fd35 	bl	800333c <hci_reset>
	HAL_Delay(100);
 80008d2:	2064      	movs	r0, #100	; 0x64
 80008d4:	f000 fce8 	bl	80012a8 <HAL_Delay>

	// configure device address
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, pubaddr);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	461a      	mov	r2, r3
 80008de:	2106      	movs	r1, #6
 80008e0:	2000      	movs	r0, #0
 80008e2:	f003 f8b6 	bl	8003a52 <aci_hal_write_config_data>
 80008e6:	4603      	mov	r3, r0
 80008e8:	74fb      	strb	r3, [r7, #19]
	if (ret != BLE_STATUS_SUCCESS) printf("aci_hal_write_config_data() failed.\n");
 80008ea:	7cfb      	ldrb	r3, [r7, #19]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <bluenrg_init+0x4a>
 80008f0:	4822      	ldr	r0, [pc, #136]	; (800097c <bluenrg_init+0xd0>)
 80008f2:	f003 fdcb 	bl	800448c <puts>

	// initialize GATT server
	ret = aci_gatt_init();
 80008f6:	f002 fefa 	bl	80036ee <aci_gatt_init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	74fb      	strb	r3, [r7, #19]
	if (ret != BLE_STATUS_SUCCESS) printf("aci_gatt_init() failed.\n");
 80008fe:	7cfb      	ldrb	r3, [r7, #19]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <bluenrg_init+0x5e>
 8000904:	481e      	ldr	r0, [pc, #120]	; (8000980 <bluenrg_init+0xd4>)
 8000906:	f003 fdc1 	bl	800448c <puts>

	// initialize GAP service
	ret = aci_gap_init(
 800090a:	f107 020a 	add.w	r2, r7, #10
 800090e:	1dbb      	adds	r3, r7, #6
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	4613      	mov	r3, r2
 800091a:	220a      	movs	r2, #10
 800091c:	2100      	movs	r1, #0
 800091e:	2001      	movs	r0, #1
 8000920:	f002 fe38 	bl	8003594 <aci_gap_init>
 8000924:	4603      	mov	r3, r0
 8000926:	74fb      	strb	r3, [r7, #19]
			GAP_PERIPHERAL_ROLE,
			0, // privacy_enabled
			10, // device_name_char_len
			&service_handle, &dev_name_char_handle, &appearance_char_handle);
	if (ret != BLE_STATUS_SUCCESS) printf("aci_gap_init() failed.\n");
 8000928:	7cfb      	ldrb	r3, [r7, #19]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <bluenrg_init+0x88>
 800092e:	4815      	ldr	r0, [pc, #84]	; (8000984 <bluenrg_init+0xd8>)
 8000930:	f003 fdac 	bl	800448c <puts>

	// update GAP characteristics
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle,
 8000934:	897c      	ldrh	r4, [r7, #10]
 8000936:	893d      	ldrh	r5, [r7, #8]
			0, // Val_Offset
			strlen(device_name), // Char_Value_Length
 8000938:	6978      	ldr	r0, [r7, #20]
 800093a:	f7ff fc4d 	bl	80001d8 <strlen>
 800093e:	4603      	mov	r3, r0
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle,
 8000940:	b2da      	uxtb	r2, r3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	4613      	mov	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	4629      	mov	r1, r5
 800094c:	4620      	mov	r0, r4
 800094e:	f002 ffce 	bl	80038ee <aci_gatt_update_char_value>
 8000952:	4603      	mov	r3, r0
 8000954:	74fb      	strb	r3, [r7, #19]
			(uint8_t *)device_name // Char_Value
			);

	// add custom service
	ret = add_simple_service();
 8000956:	f000 fa8d 	bl	8000e74 <add_simple_service>
 800095a:	4603      	mov	r3, r0
 800095c:	74fb      	strb	r3, [r7, #19]
	if (ret != BLE_STATUS_SUCCESS) printf("add_simple_service() failed.\n");
 800095e:	7cfb      	ldrb	r3, [r7, #19]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <bluenrg_init+0xbe>
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <bluenrg_init+0xdc>)
 8000966:	f003 fd91 	bl	800448c <puts>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bdb0      	pop	{r4, r5, r7, pc}
 8000972:	bf00      	nop
 8000974:	08004bfc 	.word	0x08004bfc
 8000978:	20000000 	.word	0x20000000
 800097c:	08004c08 	.word	0x08004c08
 8000980:	08004c2c 	.word	0x08004c2c
 8000984:	08004c44 	.word	0x08004c44
 8000988:	08004c5c 	.word	0x08004c5c

0800098c <bluenrg_process>:

void bluenrg_process() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af08      	add	r7, sp, #32
	uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'b', 'l', 'u', 'e', 'N', 'R', 'G', '2'};
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <bluenrg_process+0x50>)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	ca07      	ldmia	r2, {r0, r1, r2}
 8000998:	c303      	stmia	r3!, {r0, r1}
 800099a:	701a      	strb	r2, [r3, #0]
	tBleStatus ret;

	// advertise
	ret = aci_gap_set_discoverable(
 800099c:	2300      	movs	r3, #0
 800099e:	9306      	str	r3, [sp, #24]
 80009a0:	2300      	movs	r3, #0
 80009a2:	9305      	str	r3, [sp, #20]
 80009a4:	2300      	movs	r3, #0
 80009a6:	9304      	str	r3, [sp, #16]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9303      	str	r3, [sp, #12]
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	9302      	str	r3, [sp, #8]
 80009b0:	2309      	movs	r3, #9
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	2300      	movs	r3, #0
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f002 fce5 	bl	800338e <aci_gap_set_discoverable>
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
			local_name, // Local_Name
			0, // Service_Uuid_length
			NULL, // Service_Uuid_List
			0, // Slave_Conn_Interval_Min
			0); // Slave_Conn_Interval_Max
	if (ret != BLE_STATUS_SUCCESS) printf("aci_gap_set_discoverable() failed.\n");
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <bluenrg_process+0x48>
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <bluenrg_process+0x54>)
 80009d0:	f003 fd5c 	bl	800448c <puts>
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08004ca0 	.word	0x08004ca0
 80009e0:	08004c7c 	.word	0x08004c7c

080009e4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <BSP_SPI1_Init+0x54>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <BSP_SPI1_Init+0x58>)
 80009f2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <BSP_SPI1_Init+0x5c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	4911      	ldr	r1, [pc, #68]	; (8000a40 <BSP_SPI1_Init+0x5c>)
 80009fc:	600a      	str	r2, [r1, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d114      	bne.n	8000a2c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <BSP_SPI1_Init+0x54>)
 8000a04:	f001 ffa3 	bl	800294e <HAL_SPI_GetState>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10e      	bne.n	8000a2c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000a0e:	480a      	ldr	r0, [pc, #40]	; (8000a38 <BSP_SPI1_Init+0x54>)
 8000a10:	f000 f87c 	bl	8000b0c <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d108      	bne.n	8000a2c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <BSP_SPI1_Init+0x54>)
 8000a1c:	f000 f83a 	bl	8000a94 <MX_SPI1_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000a26:	f06f 0307 	mvn.w	r3, #7
 8000a2a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000194 	.word	0x20000194
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	200001ec 	.word	0x200001ec

08000a44 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a5c:	9200      	str	r2, [sp, #0]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <BSP_SPI1_SendRecv+0x3c>)
 8000a64:	f001 fdc3 	bl	80025ee <HAL_SPI_TransmitReceive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a6e:	f06f 0305 	mvn.w	r3, #5
 8000a72:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000a74:	697b      	ldr	r3, [r7, #20]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000194 	.word	0x20000194

08000a84 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a88:	f000 fc02 	bl	8001290 <HAL_GetTick>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <MX_SPI1_Init+0x74>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aac:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000acc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2228      	movs	r2, #40	; 0x28
 8000ad2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	220a      	movs	r2, #10
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f001 fceb 	bl	80024c8 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40013000 	.word	0x40013000

08000b0c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	4a2c      	ldr	r2, [pc, #176]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b22:	6453      	str	r3, [r2, #68]	; 0x44
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <SPI1_MspInit+0xc4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <SPI1_MspInit+0xc8>)
 8000b84:	f000 fd4a 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <SPI1_MspInit+0xc8>)
 8000ba4:	f000 fd3a 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000bb8:	2305      	movs	r3, #5
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <SPI1_MspInit+0xcc>)
 8000bc4:	f000 fd2a 	bl	800161c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400

08000bdc <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

// redirect printf
int __io_putchar(int ch) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)(&ch), 1, 10);
 8000be4:	1d39      	adds	r1, r7, #4
 8000be6:	230a      	movs	r3, #10
 8000be8:	2201      	movs	r2, #1
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <__io_putchar+0x20>)
 8000bec:	f001 ffea 	bl	8002bc4 <HAL_UART_Transmit>
	return ch;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001f0 	.word	0x200001f0

08000c00 <main>:

int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  HAL_Init();
 8000c04:	f000 fade 	bl	80011c4 <HAL_Init>
  SystemClock_Config();
 8000c08:	f000 f80e 	bl	8000c28 <SystemClock_Config>
  MX_GPIO_Init();
 8000c0c:	f000 f89e 	bl	8000d4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c10:	f000 f872 	bl	8000cf8 <MX_USART2_UART_Init>
  // SPI1 initialized in custom_bus.c

  printf("Initialization successful\n");
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <main+0x24>)
 8000c16:	f003 fc39 	bl	800448c <puts>

  // enable BLE module
  bluenrg_init();
 8000c1a:	f7ff fe47 	bl	80008ac <bluenrg_init>

  while (1)
  {
	  // process BLE events
	  bluenrg_process();
 8000c1e:	f7ff feb5 	bl	800098c <bluenrg_process>
 8000c22:	e7fc      	b.n	8000c1e <main+0x1e>
 8000c24:	08004cac 	.word	0x08004cac

08000c28 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	; 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2230      	movs	r2, #48	; 0x30
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fd08 	bl	800464c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <SystemClock_Config+0xc8>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <SystemClock_Config+0xc8>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <SystemClock_Config+0xc8>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <SystemClock_Config+0xcc>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <SystemClock_Config+0xcc>)
 8000c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <SystemClock_Config+0xcc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c90:	2302      	movs	r3, #2
 8000c92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000c9c:	2340      	movs	r3, #64	; 0x40
 8000c9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 ff73 	bl	8001b98 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cb8:	f000 f8d6 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 f9d5 	bl	8002088 <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ce4:	f000 f8c0 	bl	8000e68 <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3750      	adds	r7, #80	; 0x50
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <MX_USART2_UART_Init+0x50>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d30:	f001 fef8 	bl	8002b24 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d3a:	f000 f895 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001f0 	.word	0x200001f0
 8000d48:	40004400 	.word	0x40004400

08000d4c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a3c      	ldr	r2, [pc, #240]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a35      	ldr	r2, [pc, #212]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED2_Pin|SPI1_RST_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000dd8:	4821      	ldr	r0, [pc, #132]	; (8000e60 <MX_GPIO_Init+0x114>)
 8000dda:	f000 fe9f 	bl	8001b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <MX_GPIO_Init+0x118>)
 8000df6:	f000 fc11 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4814      	ldr	r0, [pc, #80]	; (8000e60 <MX_GPIO_Init+0x114>)
 8000e10:	f000 fc04 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LED2_Pin SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED2_Pin|SPI1_RST_Pin;
 8000e14:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_GPIO_Init+0x114>)
 8000e2e:	f000 fbf5 	bl	800161c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2006      	movs	r0, #6
 8000e38:	f000 fb59 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e3c:	2006      	movs	r0, #6
 8000e3e:	f000 fb72 	bl	8001526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2028      	movs	r0, #40	; 0x28
 8000e48:	f000 fb51 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e4c:	2028      	movs	r0, #40	; 0x28
 8000e4e:	f000 fb6a 	bl	8001526 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020800 	.word	0x40020800

08000e68 <Error_Handler>:

void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <add_simple_service>:

const uint8_t SERVICE_UUID[16] 	= {0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e, 0xe2, 0x11, 0x9e, 0xb1, 0xe0, 0xf2, 0x73, 0xd9};
const uint8_t CHAR_UUID[16]		= {0x66, 0x9a, 0x0c, 0x20, 0x00, 0x08, 0x96, 0x9e, 0xe2, 0x11, 0x9e, 0xb1, 0xe1, 0xf2, 0x73, 0xd9};
uint16_t service_handle;

tBleStatus add_simple_service() {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af02      	add	r7, sp, #8
	tBleStatus ret;
	Service_UUID_t service_uuid;
	BLUENRG_memcpy(service_uuid.Service_UUID_128, SERVICE_UUID, 16);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <add_simple_service+0x30>)
 8000e7c:	1d3c      	adds	r4, r7, #4
 8000e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// add service to GATT
	ret = aci_gatt_add_service(
 8000e84:	1d39      	adds	r1, r7, #4
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <add_simple_service+0x34>)
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f002 fc57 	bl	8003742 <aci_gatt_add_service>
 8000e94:	4603      	mov	r3, r0
 8000e96:	75fb      	strb	r3, [r7, #23]
			&service_uuid,
			PRIMARY_SERVICE, // Service_Type
			7, // Max_Attribute_Records
			&service_handle);

	return ret;
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08004cc8 	.word	0x08004cc8
 8000ea8:	20000238 	.word	0x20000238

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f56:	230c      	movs	r3, #12
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_UART_MspInit+0x8c>)
 8000f72:	f000 fb53 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f946 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <EXTI0_IRQHandler+0x10>)
 8000fe6:	f000 faf5 	bl	80015d4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000ff8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ffc:	f000 fda8 	bl	8001b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00a      	b.n	800102c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001016:	f3af 8000 	nop.w
 800101a:	4601      	mov	r1, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf0      	blt.n	8001016 <_read+0x12>
  }

  return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fdbf 	bl	8000bdc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
  }
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_close>:

int _close(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109e:	605a      	str	r2, [r3, #4]
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_isatty>:

int _isatty(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f003 faea 	bl	80046e8 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20020000 	.word	0x20020000
 8001140:	00000400 	.word	0x00000400
 8001144:	2000023c 	.word	0x2000023c
 8001148:	20000938 	.word	0x20000938

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001174:	f7ff ffea 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f003 faa9 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fd2d 	bl	8000c00 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b4:	08004d00 	.word	0x08004d00
  ldr r2, =_sbss
 80011b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011bc:	20000938 	.word	0x20000938

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f973 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fe58 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f999 	bl	800155e <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001244:	f000 f953 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000008 	.word	0x20000008
 8001260:	20000010 	.word	0x20000010
 8001264:	2000000c 	.word	0x2000000c

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000010 	.word	0x20000010
 800128c:	20000240 	.word	0x20000240

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000240 	.word	0x20000240

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000010 	.word	0x20000010

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db12      	blt.n	80013c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	490a      	ldr	r1, [pc, #40]	; (80013d4 <__NVIC_DisableIRQ+0x44>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	3320      	adds	r3, #32
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80013bc:	f3bf 8f4f 	dsb	sy
}
 80013c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c2:	f3bf 8f6f 	isb	sy
}
 80013c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff05 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff1a 	bl	8001338 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff8e 	bl	800142c <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff0d 	bl	8001354 <__NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff1d 	bl	8001390 <__NVIC_DisableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff94 	bl	8001494 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001576:	b480      	push	{r7}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	460b      	mov	r3, r1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	605a      	str	r2, [r3, #4]
      break;
 8001594:	e002      	b.n	800159c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
      break;
 800159a:	bf00      	nop
  }

  return status;
 800159c:	7dfb      	ldrb	r3, [r7, #23]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e003      	b.n	80015c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015c4:	2300      	movs	r3, #0
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	2201      	movs	r2, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_EXTI_IRQHandler+0x44>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_EXTI_IRQHandler+0x44>)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4798      	blx	r3
    }
  }
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e159      	b.n	80018ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8148 	bne.w	80018e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	2b02      	cmp	r3, #2
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a2 	beq.w	80018e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b57      	ldr	r3, [pc, #348]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a56      	ldr	r2, [pc, #344]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017be:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x2ec>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a49      	ldr	r2, [pc, #292]	; (800190c <HAL_GPIO_Init+0x2f0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x202>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2f4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x1fe>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a47      	ldr	r2, [pc, #284]	; (8001914 <HAL_GPIO_Init+0x2f8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x1fa>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a46      	ldr	r2, [pc, #280]	; (8001918 <HAL_GPIO_Init+0x2fc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x1f6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a45      	ldr	r2, [pc, #276]	; (800191c <HAL_GPIO_Init+0x300>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x1f2>
 800180a:	2304      	movs	r3, #4
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800180e:	2307      	movs	r3, #7
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x204>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x204>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800181e:	2300      	movs	r3, #0
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001830:	4935      	ldr	r1, [pc, #212]	; (8001908 <HAL_GPIO_Init+0x2ec>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001862:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_GPIO_Init+0x304>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800188c:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_GPIO_Init+0x304>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	f67f aea2 	bls.w	8001638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40013800 	.word	0x40013800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400
 8001914:	40020800 	.word	0x40020800
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40021000 	.word	0x40021000
 8001920:	40013c00 	.word	0x40013c00

08001924 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e0bb      	b.n	8001ab8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001940:	2201      	movs	r2, #1
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	429a      	cmp	r2, r3
 8001958:	f040 80ab 	bne.w	8001ab2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800195c:	4a5c      	ldr	r2, [pc, #368]	; (8001ad0 <HAL_GPIO_DeInit+0x1ac>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	4013      	ands	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a54      	ldr	r2, [pc, #336]	; (8001ad4 <HAL_GPIO_DeInit+0x1b0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_DeInit+0x96>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a53      	ldr	r2, [pc, #332]	; (8001ad8 <HAL_GPIO_DeInit+0x1b4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_DeInit+0x92>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_GPIO_DeInit+0x1b8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_DeInit+0x8e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_GPIO_DeInit+0x1bc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_DeInit+0x8a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a50      	ldr	r2, [pc, #320]	; (8001ae4 <HAL_GPIO_DeInit+0x1c0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_DeInit+0x86>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e008      	b.n	80019bc <HAL_GPIO_DeInit+0x98>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_DeInit+0x98>
 80019ae:	2303      	movs	r3, #3
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_DeInit+0x98>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_DeInit+0x98>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_DeInit+0x98>
 80019ba:	2300      	movs	r3, #0
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	f002 0203 	and.w	r2, r2, #3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d132      	bne.n	8001a32 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80019cc:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4944      	ldr	r1, [pc, #272]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80019da:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4941      	ldr	r1, [pc, #260]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80019e8:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	493d      	ldr	r1, [pc, #244]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	493a      	ldr	r1, [pc, #232]	; (8001ae8 <HAL_GPIO_DeInit+0x1c4>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a14:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <HAL_GPIO_DeInit+0x1ac>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	43da      	mvns	r2, r3
 8001a24:	482a      	ldr	r0, [pc, #168]	; (8001ad0 <HAL_GPIO_DeInit+0x1ac>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	08d2      	lsrs	r2, r2, #3
 8001a68:	4019      	ands	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	f67f af40 	bls.w	8001940 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b2c:	787b      	ldrb	r3, [r7, #1]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b38:	e003      	b.n	8001b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	041a      	lsls	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f806 	bl	8001b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40013c00 	.word	0x40013c00

08001b80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e267      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d075      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb6:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d00c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc2:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d112      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bce:	4b82      	ldr	r3, [pc, #520]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bda:	d10b      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	4b7e      	ldr	r3, [pc, #504]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d05b      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x108>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d157      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e242      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_OscConfig+0x74>
 8001bfe:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a75      	ldr	r2, [pc, #468]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6f      	ldr	r2, [pc, #444]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6c      	ldr	r2, [pc, #432]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xb0>
 8001c30:	4b69      	ldr	r3, [pc, #420]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a68      	ldr	r2, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a65      	ldr	r2, [pc, #404]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fb1e 	bl	8001290 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fb1a 	bl	8001290 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e207      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xc0>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fb0a 	bl	8001290 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fb06 	bl	8001290 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1f3      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0xe8>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cae:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc6:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x152>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1c7      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4937      	ldr	r1, [pc, #220]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_RCC_OscConfig+0x244>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fabf 	bl	8001290 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fabb 	bl	8001290 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1a8      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4925      	ldr	r1, [pc, #148]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_OscConfig+0x244>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fa9e 	bl	8001290 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fa9a 	bl	8001290 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e187      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d036      	beq.n	8001df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_RCC_OscConfig+0x248>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff fa7e 	bl	8001290 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fa7a 	bl	8001290 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e167      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x240>)
 8001dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x200>
 8001db6:	e01b      	b.n	8001df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_OscConfig+0x248>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa67 	bl	8001290 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc4:	e00e      	b.n	8001de4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fa63 	bl	8001290 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d907      	bls.n	8001de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e150      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	42470000 	.word	0x42470000
 8001de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ea      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8097 	beq.w	8001f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e02:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10f      	bne.n	8001e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b7d      	ldr	r3, [pc, #500]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a7c      	ldr	r2, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b77      	ldr	r3, [pc, #476]	; (800200c <HAL_RCC_OscConfig+0x474>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d118      	bne.n	8001e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3a:	4b74      	ldr	r3, [pc, #464]	; (800200c <HAL_RCC_OscConfig+0x474>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a73      	ldr	r2, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x474>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fa23 	bl	8001290 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4e:	f7ff fa1f 	bl	8001290 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e10c      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	4b6a      	ldr	r3, [pc, #424]	; (800200c <HAL_RCC_OscConfig+0x474>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2ea>
 8001e74:	4b64      	ldr	r3, [pc, #400]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a63      	ldr	r2, [pc, #396]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e80:	e01c      	b.n	8001ebc <HAL_RCC_OscConfig+0x324>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x30c>
 8001e8a:	4b5f      	ldr	r3, [pc, #380]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	4a5e      	ldr	r2, [pc, #376]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6713      	str	r3, [r2, #112]	; 0x70
 8001e96:	4b5c      	ldr	r3, [pc, #368]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	4a5b      	ldr	r2, [pc, #364]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x324>
 8001ea4:	4b58      	ldr	r3, [pc, #352]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	4a57      	ldr	r2, [pc, #348]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb0:	4b55      	ldr	r3, [pc, #340]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb4:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001eb6:	f023 0304 	bic.w	r3, r3, #4
 8001eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d015      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f9e4 	bl	8001290 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f9e0 	bl	8001290 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0cb      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0ee      	beq.n	8001ecc <HAL_RCC_OscConfig+0x334>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f9ce 	bl	8001290 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f9ca 	bl	8001290 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0b5      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ee      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a38      	ldr	r2, [pc, #224]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a1 	beq.w	8002078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d05c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d141      	bne.n	8001fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_RCC_OscConfig+0x478>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f99e 	bl	8001290 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff f99a 	bl	8001290 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e087      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	019b      	lsls	r3, r3, #6
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	491b      	ldr	r1, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x478>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff f973 	bl	8001290 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff f96f 	bl	8001290 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e05c      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x416>
 8001fcc:	e054      	b.n	8002078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_OscConfig+0x478>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f95c 	bl	8001290 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff f958 	bl	8001290 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e045      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x444>
 8001ffa:	e03d      	b.n	8002078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e038      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000
 8002010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d028      	beq.n	8002074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d121      	bne.n	8002074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d11a      	bne.n	8002074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002044:	4013      	ands	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800204a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800204c:	4293      	cmp	r3, r2
 800204e:	d111      	bne.n	8002074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	3b01      	subs	r3, #1
 800205e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800

08002088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0cc      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d90c      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b8      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020dc:	4b59      	ldr	r3, [pc, #356]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f4:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a52      	ldr	r2, [pc, #328]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	494d      	ldr	r1, [pc, #308]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d044      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d119      	bne.n	8002166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e07f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d003      	beq.n	8002146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002142:	2b03      	cmp	r3, #3
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002146:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e067      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b37      	ldr	r3, [pc, #220]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4934      	ldr	r1, [pc, #208]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002178:	f7ff f88a 	bl	8001290 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7ff f886 	bl	8001290 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e04f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d20c      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e032      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4916      	ldr	r1, [pc, #88]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	490e      	ldr	r1, [pc, #56]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800220e:	f000 f821 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002212:	4602      	mov	r2, r0
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	490a      	ldr	r1, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	5ccb      	ldrb	r3, [r1, r3]
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe ffea 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00
 8002244:	40023800 	.word	0x40023800
 8002248:	08004cd8 	.word	0x08004cd8
 800224c:	20000008 	.word	0x20000008
 8002250:	2000000c 	.word	0x2000000c

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002258:	b094      	sub	sp, #80	; 0x50
 800225a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	647b      	str	r3, [r7, #68]	; 0x44
 8002260:	2300      	movs	r3, #0
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002264:	2300      	movs	r3, #0
 8002266:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226c:	4b79      	ldr	r3, [pc, #484]	; (8002454 <HAL_RCC_GetSysClockFreq+0x200>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d00d      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x40>
 8002278:	2b08      	cmp	r3, #8
 800227a:	f200 80e1 	bhi.w	8002440 <HAL_RCC_GetSysClockFreq+0x1ec>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x34>
 8002282:	2b04      	cmp	r3, #4
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x3a>
 8002286:	e0db      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b73      	ldr	r3, [pc, #460]	; (8002458 <HAL_RCC_GetSysClockFreq+0x204>)
 800228a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800228c:	e0db      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800228e:	4b73      	ldr	r3, [pc, #460]	; (800245c <HAL_RCC_GetSysClockFreq+0x208>)
 8002290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002292:	e0d8      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002294:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	2200      	movs	r2, #0
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80022b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
 80022c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022c6:	4622      	mov	r2, r4
 80022c8:	462b      	mov	r3, r5
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	0159      	lsls	r1, r3, #5
 80022d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d8:	0150      	lsls	r0, r2, #5
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4621      	mov	r1, r4
 80022e0:	1a51      	subs	r1, r2, r1
 80022e2:	6139      	str	r1, [r7, #16]
 80022e4:	4629      	mov	r1, r5
 80022e6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022f8:	4659      	mov	r1, fp
 80022fa:	018b      	lsls	r3, r1, #6
 80022fc:	4651      	mov	r1, sl
 80022fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002302:	4651      	mov	r1, sl
 8002304:	018a      	lsls	r2, r1, #6
 8002306:	4651      	mov	r1, sl
 8002308:	ebb2 0801 	subs.w	r8, r2, r1
 800230c:	4659      	mov	r1, fp
 800230e:	eb63 0901 	sbc.w	r9, r3, r1
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800231e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002326:	4690      	mov	r8, r2
 8002328:	4699      	mov	r9, r3
 800232a:	4623      	mov	r3, r4
 800232c:	eb18 0303 	adds.w	r3, r8, r3
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	462b      	mov	r3, r5
 8002334:	eb49 0303 	adc.w	r3, r9, r3
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002346:	4629      	mov	r1, r5
 8002348:	024b      	lsls	r3, r1, #9
 800234a:	4621      	mov	r1, r4
 800234c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002350:	4621      	mov	r1, r4
 8002352:	024a      	lsls	r2, r1, #9
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235a:	2200      	movs	r2, #0
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
 800235e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002364:	f7fd ff40 	bl	80001e8 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002370:	e058      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_RCC_GetSysClockFreq+0x200>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	2200      	movs	r2, #0
 800237a:	4618      	mov	r0, r3
 800237c:	4611      	mov	r1, r2
 800237e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	f04f 0000 	mov.w	r0, #0
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	0159      	lsls	r1, r3, #5
 800239a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800239e:	0150      	lsls	r0, r2, #5
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4641      	mov	r1, r8
 80023a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80023aa:	4649      	mov	r1, r9
 80023ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023c4:	ebb2 040a 	subs.w	r4, r2, sl
 80023c8:	eb63 050b 	sbc.w	r5, r3, fp
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	00eb      	lsls	r3, r5, #3
 80023d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023da:	00e2      	lsls	r2, r4, #3
 80023dc:	4614      	mov	r4, r2
 80023de:	461d      	mov	r5, r3
 80023e0:	4643      	mov	r3, r8
 80023e2:	18e3      	adds	r3, r4, r3
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	464b      	mov	r3, r9
 80023e8:	eb45 0303 	adc.w	r3, r5, r3
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023fa:	4629      	mov	r1, r5
 80023fc:	028b      	lsls	r3, r1, #10
 80023fe:	4621      	mov	r1, r4
 8002400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002404:	4621      	mov	r1, r4
 8002406:	028a      	lsls	r2, r1, #10
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800240e:	2200      	movs	r2, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	61fa      	str	r2, [r7, #28]
 8002414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002418:	f7fd fee6 	bl	80001e8 <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4613      	mov	r3, r2
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_GetSysClockFreq+0x200>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	3301      	adds	r3, #1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800243e:	e002      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetSysClockFreq+0x204>)
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002448:	4618      	mov	r0, r3
 800244a:	3750      	adds	r7, #80	; 0x50
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_GetHCLKFreq+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000008 	.word	0x20000008

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800247c:	f7ff fff0 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0a9b      	lsrs	r3, r3, #10
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800
 800249c:	08004ce8 	.word	0x08004ce8

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a4:	f7ff ffdc 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0b5b      	lsrs	r3, r3, #13
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08004ce8 	.word	0x08004ce8

080024c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07b      	b.n	80025d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d108      	bne.n	80024f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ea:	d009      	beq.n	8002500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
 80024f2:	e005      	b.n	8002500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f85d 	bl	80025da <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	f003 0104 	and.w	r1, r3, #4
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f003 0210 	and.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b08c      	sub	sp, #48	; 0x30
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025fc:	2301      	movs	r3, #1
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x26>
 8002610:	2302      	movs	r3, #2
 8002612:	e198      	b.n	8002946 <HAL_SPI_TransmitReceive+0x358>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800261c:	f7fe fe38 	bl	8001290 <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800263a:	2b01      	cmp	r3, #1
 800263c:	d00f      	beq.n	800265e <HAL_SPI_TransmitReceive+0x70>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002644:	d107      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d103      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x68>
 800264e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002652:	2b04      	cmp	r3, #4
 8002654:	d003      	beq.n	800265e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800265c:	e16d      	b.n	800293a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x82>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x82>
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002676:	e160      	b.n	800293a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b04      	cmp	r3, #4
 8002682:	d003      	beq.n	800268c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2205      	movs	r2, #5
 8002688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	887a      	ldrh	r2, [r7, #2]
 80026a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	887a      	ldrh	r2, [r7, #2]
 80026ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d007      	beq.n	80026e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e8:	d17c      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_SPI_TransmitReceive+0x10a>
 80026f2:	8b7b      	ldrh	r3, [r7, #26]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d16a      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800271c:	e057      	b.n	80027ce <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d11b      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x176>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x176>
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d113      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	881a      	ldrh	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	1c9a      	adds	r2, r3, #2
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d119      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x1b8>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d014      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	b292      	uxth	r2, r2
 8002788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	1c9a      	adds	r2, r3, #2
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027a6:	f7fe fd73 	bl	8001290 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d80b      	bhi.n	80027ce <HAL_SPI_TransmitReceive+0x1e0>
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027bc:	d007      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80027cc:	e0b5      	b.n	800293a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1a2      	bne.n	800271e <HAL_SPI_TransmitReceive+0x130>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d19d      	bne.n	800271e <HAL_SPI_TransmitReceive+0x130>
 80027e2:	e080      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x204>
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d16f      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002818:	e05b      	b.n	80028d2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b02      	cmp	r3, #2
 8002826:	d11c      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x274>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d017      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x274>
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d114      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d119      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x2b6>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d014      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028a4:	f7fe fcf4 	bl	8001290 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d803      	bhi.n	80028bc <HAL_SPI_TransmitReceive+0x2ce>
 80028b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ba:	d102      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x2d4>
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80028d0:	e033      	b.n	800293a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d19e      	bne.n	800281a <HAL_SPI_TransmitReceive+0x22c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d199      	bne.n	800281a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f8c6 	bl	8002a7c <SPI_EndRxTxTransaction>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002902:	e01a      	b.n	800293a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002930:	e003      	b.n	800293a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002946:	4618      	mov	r0, r3
 8002948:	3730      	adds	r7, #48	; 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800295c:	b2db      	uxtb	r3, r3
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800297c:	f7fe fc88 	bl	8001290 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4413      	add	r3, r2
 800298a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800298c:	f7fe fc80 	bl	8001290 <HAL_GetTick>
 8002990:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002992:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	0d1b      	lsrs	r3, r3, #20
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a2:	e054      	b.n	8002a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029aa:	d050      	beq.n	8002a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029ac:	f7fe fc70 	bl	8001290 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d902      	bls.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d13d      	bne.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029da:	d111      	bne.n	8002a00 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e4:	d004      	beq.n	80029f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ee:	d107      	bne.n	8002a00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a08:	d10f      	bne.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e017      	b.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d19b      	bne.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000008 	.word	0x20000008

08002a7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2102      	movs	r1, #2
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ff6a 	bl	800296c <SPI_WaitFlagStateUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e032      	b.n	8002b14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <SPI_EndRxTxTransaction+0xa0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <SPI_EndRxTxTransaction+0xa4>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	0d5b      	lsrs	r3, r3, #21
 8002aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002acc:	d112      	bne.n	8002af4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff ff47 	bl	800296c <SPI_WaitFlagStateUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d016      	beq.n	8002b12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e00f      	b.n	8002b14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d0f2      	beq.n	8002af4 <SPI_EndRxTxTransaction+0x78>
 8002b0e:	e000      	b.n	8002b12 <SPI_EndRxTxTransaction+0x96>
        break;
 8002b10:	bf00      	nop
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000008 	.word	0x20000008
 8002b20:	165e9f81 	.word	0x165e9f81

08002b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e042      	b.n	8002bbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f9d6 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f973 	bl	8002e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d175      	bne.n	8002cd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_Transmit+0x2c>
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e06e      	b.n	8002cd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2221      	movs	r2, #33	; 0x21
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c02:	f7fe fb45 	bl	8001290 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d108      	bne.n	8002c30 <HAL_UART_Transmit+0x6c>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d104      	bne.n	8002c30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e003      	b.n	8002c38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c38:	e02e      	b.n	8002c98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f848 	bl	8002cda <UART_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e03a      	b.n	8002cd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3302      	adds	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e007      	b.n	8002c8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	3301      	adds	r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1cb      	bne.n	8002c3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f814 	bl	8002cda <UART_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e006      	b.n	8002cd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e000      	b.n	8002cd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cea:	e03b      	b.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf2:	d037      	beq.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fe facc 	bl	8001290 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	6a3a      	ldr	r2, [r7, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e03a      	b.n	8002d84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d023      	beq.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d020      	beq.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d01d      	beq.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d116      	bne.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f81d 	bl	8002d8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2208      	movs	r2, #8
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e00f      	b.n	8002d84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d0b4      	beq.n	8002cec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b095      	sub	sp, #84	; 0x54
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	330c      	adds	r3, #12
 8002db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db4:	643a      	str	r2, [r7, #64]	; 0x40
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dbc:	e841 2300 	strex	r3, r2, [r1]
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e5      	bne.n	8002d94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3314      	adds	r3, #20
 8002dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3314      	adds	r3, #20
 8002de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d119      	bne.n	8002e38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f023 0310 	bic.w	r3, r3, #16
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e24:	61ba      	str	r2, [r7, #24]
 8002e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	613b      	str	r3, [r7, #16]
   return(result);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e5      	bne.n	8002e04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e46:	bf00      	nop
 8002e48:	3754      	adds	r7, #84	; 0x54
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b0c0      	sub	sp, #256	; 0x100
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	68d9      	ldr	r1, [r3, #12]
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	ea40 0301 	orr.w	r3, r0, r1
 8002e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002eac:	f021 010c 	bic.w	r1, r1, #12
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	6999      	ldr	r1, [r3, #24]
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	ea40 0301 	orr.w	r3, r0, r1
 8002eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b8f      	ldr	r3, [pc, #572]	; (8003120 <UART_SetConfig+0x2cc>)
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d005      	beq.n	8002ef4 <UART_SetConfig+0xa0>
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b8d      	ldr	r3, [pc, #564]	; (8003124 <UART_SetConfig+0x2d0>)
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d104      	bne.n	8002efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ef4:	f7ff fad4 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8002ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002efc:	e003      	b.n	8002f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002efe:	f7ff fabb 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8002f02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f10:	f040 810c 	bne.w	800312c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f26:	4622      	mov	r2, r4
 8002f28:	462b      	mov	r3, r5
 8002f2a:	1891      	adds	r1, r2, r2
 8002f2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f2e:	415b      	adcs	r3, r3
 8002f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f36:	4621      	mov	r1, r4
 8002f38:	eb12 0801 	adds.w	r8, r2, r1
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	eb43 0901 	adc.w	r9, r3, r1
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f56:	4690      	mov	r8, r2
 8002f58:	4699      	mov	r9, r3
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	eb18 0303 	adds.w	r3, r8, r3
 8002f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f64:	462b      	mov	r3, r5
 8002f66:	eb49 0303 	adc.w	r3, r9, r3
 8002f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f82:	460b      	mov	r3, r1
 8002f84:	18db      	adds	r3, r3, r3
 8002f86:	653b      	str	r3, [r7, #80]	; 0x50
 8002f88:	4613      	mov	r3, r2
 8002f8a:	eb42 0303 	adc.w	r3, r2, r3
 8002f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f98:	f7fd f926 	bl	80001e8 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4b61      	ldr	r3, [pc, #388]	; (8003128 <UART_SetConfig+0x2d4>)
 8002fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	011c      	lsls	r4, r3, #4
 8002faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	1891      	adds	r1, r2, r2
 8002fc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fc4:	415b      	adcs	r3, r3
 8002fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fcc:	4641      	mov	r1, r8
 8002fce:	eb12 0a01 	adds.w	sl, r2, r1
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fec:	4692      	mov	sl, r2
 8002fee:	469b      	mov	fp, r3
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8003000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003010:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003018:	460b      	mov	r3, r1
 800301a:	18db      	adds	r3, r3, r3
 800301c:	643b      	str	r3, [r7, #64]	; 0x40
 800301e:	4613      	mov	r3, r2
 8003020:	eb42 0303 	adc.w	r3, r2, r3
 8003024:	647b      	str	r3, [r7, #68]	; 0x44
 8003026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800302a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800302e:	f7fd f8db 	bl	80001e8 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4611      	mov	r1, r2
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <UART_SetConfig+0x2d4>)
 800303a:	fba3 2301 	umull	r2, r3, r3, r1
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2264      	movs	r2, #100	; 0x64
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	1acb      	subs	r3, r1, r3
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <UART_SetConfig+0x2d4>)
 8003050:	fba3 2302 	umull	r2, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800305c:	441c      	add	r4, r3
 800305e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003068:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800306c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003070:	4642      	mov	r2, r8
 8003072:	464b      	mov	r3, r9
 8003074:	1891      	adds	r1, r2, r2
 8003076:	63b9      	str	r1, [r7, #56]	; 0x38
 8003078:	415b      	adcs	r3, r3
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003080:	4641      	mov	r1, r8
 8003082:	1851      	adds	r1, r2, r1
 8003084:	6339      	str	r1, [r7, #48]	; 0x30
 8003086:	4649      	mov	r1, r9
 8003088:	414b      	adcs	r3, r1
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003098:	4659      	mov	r1, fp
 800309a:	00cb      	lsls	r3, r1, #3
 800309c:	4651      	mov	r1, sl
 800309e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030a2:	4651      	mov	r1, sl
 80030a4:	00ca      	lsls	r2, r1, #3
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	4642      	mov	r2, r8
 80030ae:	189b      	adds	r3, r3, r2
 80030b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030b4:	464b      	mov	r3, r9
 80030b6:	460a      	mov	r2, r1
 80030b8:	eb42 0303 	adc.w	r3, r2, r3
 80030bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030d4:	460b      	mov	r3, r1
 80030d6:	18db      	adds	r3, r3, r3
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030da:	4613      	mov	r3, r2
 80030dc:	eb42 0303 	adc.w	r3, r2, r3
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030ea:	f7fd f87d 	bl	80001e8 <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <UART_SetConfig+0x2d4>)
 80030f4:	fba3 1302 	umull	r1, r3, r3, r2
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	2164      	movs	r1, #100	; 0x64
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	3332      	adds	r3, #50	; 0x32
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <UART_SetConfig+0x2d4>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	f003 0207 	and.w	r2, r3, #7
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4422      	add	r2, r4
 800311a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800311c:	e106      	b.n	800332c <UART_SetConfig+0x4d8>
 800311e:	bf00      	nop
 8003120:	40011000 	.word	0x40011000
 8003124:	40011400 	.word	0x40011400
 8003128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800312c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003130:	2200      	movs	r2, #0
 8003132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800313a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800313e:	4642      	mov	r2, r8
 8003140:	464b      	mov	r3, r9
 8003142:	1891      	adds	r1, r2, r2
 8003144:	6239      	str	r1, [r7, #32]
 8003146:	415b      	adcs	r3, r3
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800314e:	4641      	mov	r1, r8
 8003150:	1854      	adds	r4, r2, r1
 8003152:	4649      	mov	r1, r9
 8003154:	eb43 0501 	adc.w	r5, r3, r1
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	00eb      	lsls	r3, r5, #3
 8003162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003166:	00e2      	lsls	r2, r4, #3
 8003168:	4614      	mov	r4, r2
 800316a:	461d      	mov	r5, r3
 800316c:	4643      	mov	r3, r8
 800316e:	18e3      	adds	r3, r4, r3
 8003170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003174:	464b      	mov	r3, r9
 8003176:	eb45 0303 	adc.w	r3, r5, r3
 800317a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800318a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800319a:	4629      	mov	r1, r5
 800319c:	008b      	lsls	r3, r1, #2
 800319e:	4621      	mov	r1, r4
 80031a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a4:	4621      	mov	r1, r4
 80031a6:	008a      	lsls	r2, r1, #2
 80031a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031ac:	f7fd f81c 	bl	80001e8 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4b60      	ldr	r3, [pc, #384]	; (8003338 <UART_SetConfig+0x4e4>)
 80031b6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	011c      	lsls	r4, r3, #4
 80031be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031d0:	4642      	mov	r2, r8
 80031d2:	464b      	mov	r3, r9
 80031d4:	1891      	adds	r1, r2, r2
 80031d6:	61b9      	str	r1, [r7, #24]
 80031d8:	415b      	adcs	r3, r3
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e0:	4641      	mov	r1, r8
 80031e2:	1851      	adds	r1, r2, r1
 80031e4:	6139      	str	r1, [r7, #16]
 80031e6:	4649      	mov	r1, r9
 80031e8:	414b      	adcs	r3, r1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f8:	4659      	mov	r1, fp
 80031fa:	00cb      	lsls	r3, r1, #3
 80031fc:	4651      	mov	r1, sl
 80031fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003202:	4651      	mov	r1, sl
 8003204:	00ca      	lsls	r2, r1, #3
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	4603      	mov	r3, r0
 800320c:	4642      	mov	r2, r8
 800320e:	189b      	adds	r3, r3, r2
 8003210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003214:	464b      	mov	r3, r9
 8003216:	460a      	mov	r2, r1
 8003218:	eb42 0303 	adc.w	r3, r2, r3
 800321c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	67bb      	str	r3, [r7, #120]	; 0x78
 800322a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003238:	4649      	mov	r1, r9
 800323a:	008b      	lsls	r3, r1, #2
 800323c:	4641      	mov	r1, r8
 800323e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003242:	4641      	mov	r1, r8
 8003244:	008a      	lsls	r2, r1, #2
 8003246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800324a:	f7fc ffcd 	bl	80001e8 <__aeabi_uldivmod>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4611      	mov	r1, r2
 8003254:	4b38      	ldr	r3, [pc, #224]	; (8003338 <UART_SetConfig+0x4e4>)
 8003256:	fba3 2301 	umull	r2, r3, r3, r1
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2264      	movs	r2, #100	; 0x64
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	1acb      	subs	r3, r1, r3
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	3332      	adds	r3, #50	; 0x32
 8003268:	4a33      	ldr	r2, [pc, #204]	; (8003338 <UART_SetConfig+0x4e4>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003274:	441c      	add	r4, r3
 8003276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327a:	2200      	movs	r2, #0
 800327c:	673b      	str	r3, [r7, #112]	; 0x70
 800327e:	677a      	str	r2, [r7, #116]	; 0x74
 8003280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	1891      	adds	r1, r2, r2
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	415b      	adcs	r3, r3
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003294:	4641      	mov	r1, r8
 8003296:	1851      	adds	r1, r2, r1
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	4649      	mov	r1, r9
 800329c:	414b      	adcs	r3, r1
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032ac:	4659      	mov	r1, fp
 80032ae:	00cb      	lsls	r3, r1, #3
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b6:	4651      	mov	r1, sl
 80032b8:	00ca      	lsls	r2, r1, #3
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	4642      	mov	r2, r8
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80032c6:	464b      	mov	r3, r9
 80032c8:	460a      	mov	r2, r1
 80032ca:	eb42 0303 	adc.w	r3, r2, r3
 80032ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	663b      	str	r3, [r7, #96]	; 0x60
 80032da:	667a      	str	r2, [r7, #100]	; 0x64
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032e8:	4649      	mov	r1, r9
 80032ea:	008b      	lsls	r3, r1, #2
 80032ec:	4641      	mov	r1, r8
 80032ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f2:	4641      	mov	r1, r8
 80032f4:	008a      	lsls	r2, r1, #2
 80032f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032fa:	f7fc ff75 	bl	80001e8 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <UART_SetConfig+0x4e4>)
 8003304:	fba3 1302 	umull	r1, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	2164      	movs	r1, #100	; 0x64
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	3332      	adds	r3, #50	; 0x32
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <UART_SetConfig+0x4e4>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	f003 020f 	and.w	r2, r3, #15
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4422      	add	r2, r4
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003332:	46bd      	mov	sp, r7
 8003334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003338:	51eb851f 	.word	0x51eb851f

0800333c <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	2218      	movs	r2, #24
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f001 f97c 	bl	800464c <memset>
  rq.ogf = 0x03;
 8003354:	2303      	movs	r3, #3
 8003356:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8003358:	2303      	movs	r3, #3
 800335a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003360:	2301      	movs	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003364:	f107 0308 	add.w	r3, r7, #8
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fcfc 	bl	8003d68 <hci_send_req>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	da01      	bge.n	800337a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003376:	23ff      	movs	r3, #255	; 0xff
 8003378:	e005      	b.n	8003386 <hci_reset+0x4a>
  if (status) {
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <hci_reset+0x48>
    return status;
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	e000      	b.n	8003386 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800338e:	b5b0      	push	{r4, r5, r7, lr}
 8003390:	b0ce      	sub	sp, #312	; 0x138
 8003392:	af00      	add	r7, sp, #0
 8003394:	4605      	mov	r5, r0
 8003396:	460c      	mov	r4, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033a0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80033a4:	462a      	mov	r2, r5
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033b0:	4622      	mov	r2, r4
 80033b2:	801a      	strh	r2, [r3, #0]
 80033b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033b8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80033bc:	4602      	mov	r2, r0
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033c4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80033c8:	460a      	mov	r2, r1
 80033ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80033d4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80033d8:	3308      	adds	r3, #8
 80033da:	f107 020c 	add.w	r2, r7, #12
 80033de:	4413      	add	r3, r2
 80033e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80033e4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80033e8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80033ec:	4413      	add	r3, r2
 80033ee:	3309      	adds	r3, #9
 80033f0:	f107 020c 	add.w	r2, r7, #12
 80033f4:	4413      	add	r3, r2
 80033f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80033fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033fe:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800340c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003410:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003414:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800341c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003420:	3301      	adds	r3, #1
 8003422:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8003426:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800342a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800342e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8003432:	8812      	ldrh	r2, [r2, #0]
 8003434:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003438:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800343c:	3302      	adds	r3, #2
 800343e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8003442:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003446:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800344a:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800344e:	8812      	ldrh	r2, [r2, #0]
 8003450:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003454:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003458:	3302      	adds	r3, #2
 800345a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800345e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003462:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003466:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800346a:	7812      	ldrb	r2, [r2, #0]
 800346c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800346e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003472:	3301      	adds	r3, #1
 8003474:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8003478:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800347c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003480:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003482:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003486:	3301      	adds	r3, #1
 8003488:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800348c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003490:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003494:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003496:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800349a:	3301      	adds	r3, #1
 800349c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 80034a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80034a4:	3308      	adds	r3, #8
 80034a6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80034aa:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 f947 	bl	8004742 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 80034b4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80034b8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80034bc:	4413      	add	r3, r2
 80034be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 80034c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034c6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80034ca:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80034cc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80034d0:	3301      	adds	r3, #1
 80034d2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 80034d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034da:	3301      	adds	r3, #1
 80034dc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80034e0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f92c 	bl	8004742 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 80034ea:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80034ee:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80034f2:	4413      	add	r3, r2
 80034f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80034f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034fc:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003500:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003502:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003506:	3302      	adds	r3, #2
 8003508:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800350c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003510:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003514:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003516:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800351a:	3302      	adds	r3, #2
 800351c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003524:	2218      	movs	r2, #24
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f88f 	bl	800464c <memset>
  rq.ogf = 0x3f;
 800352e:	233f      	movs	r3, #63	; 0x3f
 8003530:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003534:	2383      	movs	r3, #131	; 0x83
 8003536:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800353a:	f107 030c 	add.w	r3, r7, #12
 800353e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003542:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003546:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800354a:	f107 030b 	add.w	r3, r7, #11
 800354e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003558:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fc02 	bl	8003d68 <hci_send_req>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	da01      	bge.n	800356e <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800356a:	23ff      	movs	r3, #255	; 0xff
 800356c:	e00d      	b.n	800358a <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800356e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003572:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <aci_gap_set_discoverable+0x1fa>
    return status;
 800357c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003580:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	e000      	b.n	800358a <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003590:	46bd      	mov	sp, r7
 8003592:	bdb0      	pop	{r4, r5, r7, pc}

08003594 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b0cf      	sub	sp, #316	; 0x13c
 8003598:	af00      	add	r7, sp, #0
 800359a:	4604      	mov	r4, r0
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80035a4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80035ae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80035b2:	4622      	mov	r2, r4
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80035ba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80035be:	4602      	mov	r2, r0
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80035c6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80035ca:	460a      	mov	r2, r1
 80035cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	2207      	movs	r2, #7
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 f834 	bl	800464c <memset>
  uint8_t index_input = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80035ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035ee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80035f2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80035fa:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80035fe:	3301      	adds	r3, #1
 8003600:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8003604:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003608:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800360c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003614:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8003618:	3301      	adds	r3, #1
 800361a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800361e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003622:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003626:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800362e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8003632:	3301      	adds	r3, #1
 8003634:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003638:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800363c:	2218      	movs	r2, #24
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f803 	bl	800464c <memset>
  rq.ogf = 0x3f;
 8003646:	233f      	movs	r3, #63	; 0x3f
 8003648:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800364c:	238a      	movs	r3, #138	; 0x8a
 800364e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800365a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800365e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800366a:	2307      	movs	r3, #7
 800366c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8003670:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fb76 	bl	8003d68 <hci_send_req>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	da01      	bge.n	8003686 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8003682:	23ff      	movs	r3, #255	; 0xff
 8003684:	e02e      	b.n	80036e4 <aci_gap_init+0x150>
  if (resp.Status) {
 8003686:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800368a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <aci_gap_init+0x10c>
    return resp.Status;
 8003694:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	e021      	b.n	80036e4 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80036a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80036ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80036cc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80036ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036d6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036e0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}

080036ee <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b088      	sub	sp, #32
 80036f2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80036f8:	f107 0308 	add.w	r3, r7, #8
 80036fc:	2218      	movs	r2, #24
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 ffa3 	bl	800464c <memset>
  rq.ogf = 0x3f;
 8003706:	233f      	movs	r3, #63	; 0x3f
 8003708:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800370a:	f240 1301 	movw	r3, #257	; 0x101
 800370e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fb22 	bl	8003d68 <hci_send_req>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	da01      	bge.n	800372e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800372a:	23ff      	movs	r3, #255	; 0xff
 800372c:	e005      	b.n	800373a <aci_gatt_init+0x4c>
  if (status) {
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <aci_gatt_init+0x4a>
    return status;
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	e000      	b.n	800373a <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8003742:	b590      	push	{r4, r7, lr}
 8003744:	b0cf      	sub	sp, #316	; 0x13c
 8003746:	af00      	add	r7, sp, #0
 8003748:	4604      	mov	r4, r0
 800374a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800374e:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8003752:	6001      	str	r1, [r0, #0]
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800375c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003760:	4622      	mov	r2, r4
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003768:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800376c:	4602      	mov	r2, r0
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003774:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8003778:	460a      	mov	r2, r1
 800377a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003784:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003788:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d00a      	beq.n	80037a8 <aci_gatt_add_service+0x66>
 8003792:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003796:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d101      	bne.n	80037a4 <aci_gatt_add_service+0x62>
 80037a0:	2311      	movs	r3, #17
 80037a2:	e002      	b.n	80037aa <aci_gatt_add_service+0x68>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <aci_gatt_add_service+0x68>
 80037a8:	2303      	movs	r3, #3
 80037aa:	f107 020c 	add.w	r2, r7, #12
 80037ae:	4413      	add	r3, r2
 80037b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80037b4:	f107 0308 	add.w	r3, r7, #8
 80037b8:	2203      	movs	r2, #3
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 ff45 	bl	800464c <memset>
  uint8_t index_input = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80037c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037cc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80037d0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80037d8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80037dc:	3301      	adds	r3, #1
 80037de:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80037e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80037e6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d002      	beq.n	80037f6 <aci_gatt_add_service+0xb4>
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d004      	beq.n	80037fe <aci_gatt_add_service+0xbc>
 80037f4:	e007      	b.n	8003806 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 80037f6:	2302      	movs	r3, #2
 80037f8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80037fc:	e005      	b.n	800380a <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80037fe:	2310      	movs	r3, #16
 8003800:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003804:	e001      	b.n	800380a <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8003806:	2347      	movs	r3, #71	; 0x47
 8003808:	e06c      	b.n	80038e4 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800380a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800380e:	1c58      	adds	r0, r3, #1
 8003810:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8003814:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003818:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800381c:	6819      	ldr	r1, [r3, #0]
 800381e:	f000 ff90 	bl	8004742 <memcpy>
    index_input += size;
 8003822:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8003826:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800382a:	4413      	add	r3, r2
 800382c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8003830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003834:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003838:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003840:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003844:	3301      	adds	r3, #1
 8003846:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800384a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800384e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003852:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800385a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800385e:	3301      	adds	r3, #1
 8003860:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003868:	2218      	movs	r2, #24
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f000 feed 	bl	800464c <memset>
  rq.ogf = 0x3f;
 8003872:	233f      	movs	r3, #63	; 0x3f
 8003874:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8003878:	f44f 7381 	mov.w	r3, #258	; 0x102
 800387c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003888:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800388c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003898:	2303      	movs	r3, #3
 800389a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800389e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fa5f 	bl	8003d68 <hci_send_req>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da01      	bge.n	80038b4 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80038b0:	23ff      	movs	r3, #255	; 0xff
 80038b2:	e017      	b.n	80038e4 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 80038b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <aci_gatt_add_service+0x18c>
    return resp.Status;
 80038c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	e00a      	b.n	80038e4 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80038ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80038e0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80038ee:	b5b0      	push	{r4, r5, r7, lr}
 80038f0:	b0cc      	sub	sp, #304	; 0x130
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4605      	mov	r5, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003900:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003904:	462a      	mov	r2, r5
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800390c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003910:	4622      	mov	r2, r4
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003918:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800391c:	4602      	mov	r2, r0
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003924:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8003928:	460a      	mov	r2, r1
 800392a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003938:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8003946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800394a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800394e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003956:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800395a:	3302      	adds	r3, #2
 800395c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8003960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003964:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003968:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800396c:	8812      	ldrh	r2, [r2, #0]
 800396e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8003970:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003974:	3302      	adds	r3, #2
 8003976:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800397a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800397e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003982:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800398a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800398e:	3301      	adds	r3, #1
 8003990:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8003994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003998:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800399c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80039a4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80039a8:	3301      	adds	r3, #1
 80039aa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80039ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039b2:	1d98      	adds	r0, r3, #6
 80039b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039b8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039c4:	f000 febd 	bl	8004742 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80039c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039cc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80039d0:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80039dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039e0:	2218      	movs	r2, #24
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fe31 	bl	800464c <memset>
  rq.ogf = 0x3f;
 80039ea:	233f      	movs	r3, #63	; 0x3f
 80039ec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80039f0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80039f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003a00:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003a04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003a08:	f107 030b 	add.w	r3, r7, #11
 8003a0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003a16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f9a3 	bl	8003d68 <hci_send_req>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da01      	bge.n	8003a2c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8003a28:	23ff      	movs	r3, #255	; 0xff
 8003a2a:	e00d      	b.n	8003a48 <aci_gatt_update_char_value+0x15a>
  if (status) {
 8003a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a30:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <aci_gatt_update_char_value+0x158>
    return status;
 8003a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a3e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	e000      	b.n	8003a48 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}

08003a52 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b0cc      	sub	sp, #304	; 0x130
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a66:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003a76:	460a      	mov	r2, r1
 8003a78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a86:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8003a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a9c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003aa4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8003aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003ab6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003abe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8003ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003acc:	1c98      	adds	r0, r3, #2
 8003ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ad2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	f000 fe2e 	bl	8004742 <memcpy>
    index_input += Length*sizeof(uint8_t);
 8003ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003aee:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003afe:	2218      	movs	r2, #24
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fda2 	bl	800464c <memset>
  rq.ogf = 0x3f;
 8003b08:	233f      	movs	r3, #63	; 0x3f
 8003b0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8003b0e:	230c      	movs	r3, #12
 8003b10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003b1c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003b20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003b24:	f107 030b 	add.w	r3, r7, #11
 8003b28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f915 	bl	8003d68 <hci_send_req>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	da01      	bge.n	8003b48 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8003b44:	23ff      	movs	r3, #255	; 0xff
 8003b46:	e00d      	b.n	8003b64 <aci_hal_write_config_data+0x112>
  if (status) {
 8003b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b4c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <aci_hal_write_config_data+0x110>
    return status;
 8003b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b5a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	e000      	b.n	8003b64 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d001      	beq.n	8003b88 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00c      	b.n	8003ba2 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003b96:	3b03      	subs	r3, #3
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e000      	b.n	8003ba2 <verify_packet+0x34>
  
  return 0;      
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0a6      	sub	sp, #152	; 0x98
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	81fb      	strh	r3, [r7, #14]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	81bb      	strh	r3, [r7, #12]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003bc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bcc:	b21a      	sxth	r2, r3
 8003bce:	89fb      	ldrh	r3, [r7, #14]
 8003bd0:	029b      	lsls	r3, r3, #10
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003be0:	2301      	movs	r3, #1
 8003be2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003be4:	f107 0318 	add.w	r3, r7, #24
 8003be8:	3301      	adds	r3, #1
 8003bea:	461a      	mov	r2, r3
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	8819      	ldrh	r1, [r3, #0]
 8003bf2:	789b      	ldrb	r3, [r3, #2]
 8003bf4:	8011      	strh	r1, [r2, #0]
 8003bf6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003bf8:	f107 0318 	add.w	r3, r7, #24
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	7afa      	ldrb	r2, [r7, #11]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fd9d 	bl	8004742 <memcpy>
  
  if (hciContext.io.Send)
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <send_cmd+0x7c>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <send_cmd+0x7c>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	7afa      	ldrb	r2, [r7, #11]
 8003c16:	b292      	uxth	r2, r2
 8003c18:	3204      	adds	r2, #4
 8003c1a:	b291      	uxth	r1, r2
 8003c1c:	f107 0218 	add.w	r2, r7, #24
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
  }
}
 8003c24:	bf00      	nop
 8003c26:	3798      	adds	r7, #152	; 0x98
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200007cc 	.word	0x200007cc

08003c30 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003c3a:	e00a      	b.n	8003c52 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	f000 fabc 	bl	80041c0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa23 	bl	8004098 <list_insert_head>
  while (!list_is_empty(src_list))
 8003c52:	6838      	ldr	r0, [r7, #0]
 8003c54:	f000 f9fe 	bl	8004054 <list_is_empty>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <move_list+0xc>
  }
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003c6e:	e009      	b.n	8003c84 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4809      	ldr	r0, [pc, #36]	; (8003c9c <free_event_list+0x34>)
 8003c76:	f000 fa7c 	bl	8004172 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4808      	ldr	r0, [pc, #32]	; (8003ca0 <free_event_list+0x38>)
 8003c80:	f000 fa30 	bl	80040e4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003c84:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <free_event_list+0x38>)
 8003c86:	f000 fac2 	bl	800420e <list_get_size>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	ddef      	ble.n	8003c70 <free_event_list+0x8>
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000024c 	.word	0x2000024c
 8003ca0:	20000244 	.word	0x20000244

08003ca4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003cb4:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <hci_init+0x74>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003cba:	4818      	ldr	r0, [pc, #96]	; (8003d1c <hci_init+0x78>)
 8003cbc:	f000 f9ba 	bl	8004034 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003cc0:	4817      	ldr	r0, [pc, #92]	; (8003d20 <hci_init+0x7c>)
 8003cc2:	f000 f9b7 	bl	8004034 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003cc6:	f7fc fda5 	bl	8000814 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
 8003cce:	e00c      	b.n	8003cea <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	228c      	movs	r2, #140	; 0x8c
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <hci_init+0x80>)
 8003cda:	4413      	add	r3, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	480f      	ldr	r0, [pc, #60]	; (8003d1c <hci_init+0x78>)
 8003ce0:	f000 fa00 	bl	80040e4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d9ef      	bls.n	8003cd0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <hci_init+0x74>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <hci_init+0x5c>
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <hci_init+0x74>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <hci_init+0x74>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <hci_init+0x6a>
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <hci_init+0x74>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4798      	blx	r3
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200007cc 	.word	0x200007cc
 8003d1c:	20000244 	.word	0x20000244
 8003d20:	2000024c 	.word	0x2000024c
 8003d24:	20000254 	.word	0x20000254

08003d28 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <hci_register_io_bus+0x3c>)
 8003d36:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <hci_register_io_bus+0x3c>)
 8003d3e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <hci_register_io_bus+0x3c>)
 8003d46:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <hci_register_io_bus+0x3c>)
 8003d4e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a03      	ldr	r2, [pc, #12]	; (8003d64 <hci_register_io_bus+0x3c>)
 8003d56:	6093      	str	r3, [r2, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	200007cc 	.word	0x200007cc

08003d68 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08e      	sub	sp, #56	; 0x38
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	885b      	ldrh	r3, [r3, #2]
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d7e:	b21a      	sxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	029b      	lsls	r3, r3, #10
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003d92:	f107 0308 	add.w	r3, r7, #8
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f94c 	bl	8004034 <list_init_head>

  free_event_list();
 8003d9c:	f7ff ff64 	bl	8003c68 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8818      	ldrh	r0, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8859      	ldrh	r1, [r3, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f7ff fefd 	bl	8003bb0 <send_cmd>
  
  if (async)
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <hci_send_req+0x58>
  {
    return 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e0e2      	b.n	8003f86 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7fd fa66 	bl	8001290 <HAL_GetTick>
 8003dc4:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003dc6:	f7fd fa63 	bl	8001290 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd4:	f200 80b3 	bhi.w	8003f3e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003dd8:	486d      	ldr	r0, [pc, #436]	; (8003f90 <hci_send_req+0x228>)
 8003dda:	f000 f93b 	bl	8004054 <list_is_empty>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d000      	beq.n	8003de6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003de4:	e7ef      	b.n	8003dc6 <hci_send_req+0x5e>
      {
        break;
 8003de6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	4619      	mov	r1, r3
 8003dee:	4868      	ldr	r0, [pc, #416]	; (8003f90 <hci_send_req+0x228>)
 8003df0:	f000 f9bf 	bl	8004172 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3308      	adds	r3, #8
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d17f      	bne.n	8003f02 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	3301      	adds	r3, #1
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	3303      	adds	r3, #3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003e16:	3b03      	subs	r3, #3
 8003e18:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e20:	d04c      	beq.n	8003ebc <hci_send_req+0x154>
 8003e22:	2b3e      	cmp	r3, #62	; 0x3e
 8003e24:	dc68      	bgt.n	8003ef8 <hci_send_req+0x190>
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	f000 808b 	beq.w	8003f42 <hci_send_req+0x1da>
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	dc63      	bgt.n	8003ef8 <hci_send_req+0x190>
 8003e30:	2b0e      	cmp	r3, #14
 8003e32:	d023      	beq.n	8003e7c <hci_send_req+0x114>
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d15f      	bne.n	8003ef8 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	885b      	ldrh	r3, [r3, #2]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d17e      	bne.n	8003f46 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d004      	beq.n	8003e5a <hci_send_req+0xf2>
          if (cs->status) {
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d051      	beq.n	8003efc <hci_send_req+0x194>
            goto failed;
 8003e58:	e078      	b.n	8003f4c <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	bf28      	it	cs
 8003e64:	461a      	movcs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6918      	ldr	r0, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e76:	f000 fc64 	bl	8004742 <memcpy>
        goto done;
 8003e7a:	e078      	b.n	8003f6e <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d15d      	bne.n	8003f4a <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	3303      	adds	r3, #3
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	3b03      	subs	r3, #3
 8003e98:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	bf28      	it	cs
 8003ea4:	461a      	movcs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6918      	ldr	r0, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb6:	f000 fc44 	bl	8004742 <memcpy>
        goto done;
 8003eba:	e058      	b.n	8003f6e <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d118      	bne.n	8003f00 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf28      	it	cs
 8003ede:	461a      	movcs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6918      	ldr	r0, [r3, #16]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f000 fc26 	bl	8004742 <memcpy>
        goto done;
 8003ef6:	e03a      	b.n	8003f6e <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8003ef8:	bf00      	nop
 8003efa:	e002      	b.n	8003f02 <hci_send_req+0x19a>
          break;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <hci_send_req+0x19a>
          break;
 8003f00:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003f02:	4824      	ldr	r0, [pc, #144]	; (8003f94 <hci_send_req+0x22c>)
 8003f04:	f000 f8a6 	bl	8004054 <list_is_empty>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <hci_send_req+0x1c2>
 8003f0e:	4820      	ldr	r0, [pc, #128]	; (8003f90 <hci_send_req+0x228>)
 8003f10:	f000 f8a0 	bl	8004054 <list_is_empty>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	481d      	ldr	r0, [pc, #116]	; (8003f94 <hci_send_req+0x22c>)
 8003f20:	f000 f8e0 	bl	80040e4 <list_insert_tail>
      hciReadPacket=NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	e008      	b.n	8003f3c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	f107 0308 	add.w	r3, r7, #8
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f8d6 	bl	80040e4 <list_insert_tail>
      hciReadPacket=NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
  {
 8003f3c:	e740      	b.n	8003dc0 <hci_send_req+0x58>
        goto failed;
 8003f3e:	bf00      	nop
 8003f40:	e004      	b.n	8003f4c <hci_send_req+0x1e4>
        goto failed;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <hci_send_req+0x1e4>
          goto failed;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <hci_send_req+0x1e4>
          goto failed;
 8003f4a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4619      	mov	r1, r3
 8003f56:	480f      	ldr	r0, [pc, #60]	; (8003f94 <hci_send_req+0x22c>)
 8003f58:	f000 f89e 	bl	8004098 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003f5c:	f107 0308 	add.w	r3, r7, #8
 8003f60:	4619      	mov	r1, r3
 8003f62:	480b      	ldr	r0, [pc, #44]	; (8003f90 <hci_send_req+0x228>)
 8003f64:	f7ff fe64 	bl	8003c30 <move_list>

  return -1;
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f6c:	e00b      	b.n	8003f86 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4619      	mov	r1, r3
 8003f72:	4808      	ldr	r0, [pc, #32]	; (8003f94 <hci_send_req+0x22c>)
 8003f74:	f000 f890 	bl	8004098 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4804      	ldr	r0, [pc, #16]	; (8003f90 <hci_send_req+0x228>)
 8003f80:	f7ff fe56 	bl	8003c30 <move_list>

  return 0;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3738      	adds	r7, #56	; 0x38
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000024c 	.word	0x2000024c
 8003f94:	20000244 	.word	0x20000244

08003f98 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003fa8:	481f      	ldr	r0, [pc, #124]	; (8004028 <hci_notify_asynch_evt+0x90>)
 8003faa:	f000 f853 	bl	8004054 <list_is_empty>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d132      	bne.n	800401a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	4619      	mov	r1, r3
 8003fba:	481b      	ldr	r0, [pc, #108]	; (8004028 <hci_notify_asynch_evt+0x90>)
 8003fbc:	f000 f8d9 	bl	8004172 <list_remove_head>
    
    if (hciContext.io.Receive)
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <hci_notify_asynch_evt+0x94>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02a      	beq.n	800401e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003fc8:	4b18      	ldr	r3, [pc, #96]	; (800402c <hci_notify_asynch_evt+0x94>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4798      	blx	r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d016      	beq.n	800400e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	7cfa      	ldrb	r2, [r7, #19]
 8003fe4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fdbf 	bl	8003b6e <verify_packet>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	480d      	ldr	r0, [pc, #52]	; (8004030 <hci_notify_asynch_evt+0x98>)
 8003ffc:	f000 f872 	bl	80040e4 <list_insert_tail>
 8004000:	e00d      	b.n	800401e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4619      	mov	r1, r3
 8004006:	4808      	ldr	r0, [pc, #32]	; (8004028 <hci_notify_asynch_evt+0x90>)
 8004008:	f000 f846 	bl	8004098 <list_insert_head>
 800400c:	e007      	b.n	800401e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4619      	mov	r1, r3
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <hci_notify_asynch_evt+0x90>)
 8004014:	f000 f840 	bl	8004098 <list_insert_head>
 8004018:	e001      	b.n	800401e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800401e:	697b      	ldr	r3, [r7, #20]
  
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000244 	.word	0x20000244
 800402c:	200007cc 	.word	0x200007cc
 8004030:	2000024c 	.word	0x2000024c

08004034 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	605a      	str	r2, [r3, #4]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800405c:	f3ef 8310 	mrs	r3, PRIMASK
 8004060:	60fb      	str	r3, [r7, #12]
  return(result);
 8004062:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004066:	b672      	cpsid	i
}
 8004068:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d102      	bne.n	800407a <list_is_empty+0x26>
  {
    return_value = 1;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
 8004078:	e001      	b.n	800407e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040a2:	f3ef 8310 	mrs	r3, PRIMASK
 80040a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80040a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80040aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ac:	b672      	cpsid	i
}
 80040ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040ee:	f3ef 8310 	mrs	r3, PRIMASK
 80040f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80040f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80040f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f8:	b672      	cpsid	i
}
 80040fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f383 8810 	msr	PRIMASK, r3
}
 8004122:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004138:	f3ef 8310 	mrs	r3, PRIMASK
 800413c:	60fb      	str	r3, [r7, #12]
  return(result);
 800413e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004142:	b672      	cpsid	i
}
 8004144:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6852      	ldr	r2, [r2, #4]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f383 8810 	msr	PRIMASK, r3
}
 8004164:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800417c:	f3ef 8310 	mrs	r3, PRIMASK
 8004180:	60fb      	str	r3, [r7, #12]
  return(result);
 8004182:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004186:	b672      	cpsid	i
}
 8004188:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ffca 	bl	8004130 <list_remove_node>
  (*node)->next = NULL;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80041b8:	bf00      	nop
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041ca:	f3ef 8310 	mrs	r3, PRIMASK
 80041ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80041d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80041d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80041d4:	b672      	cpsid	i
}
 80041d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ffa3 	bl	8004130 <list_remove_node>
  (*node)->next = NULL;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800420e:	b480      	push	{r7}
 8004210:	b089      	sub	sp, #36	; 0x24
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  int size = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800421a:	f3ef 8310 	mrs	r3, PRIMASK
 800421e:	613b      	str	r3, [r7, #16]
  return(result);
 8004220:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004224:	b672      	cpsid	i
}
 8004226:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800422e:	e005      	b.n	800423c <list_get_size+0x2e>
  {
    size++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d1f5      	bne.n	8004230 <list_get_size+0x22>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8004250:	69fb      	ldr	r3, [r7, #28]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <std>:
 8004260:	2300      	movs	r3, #0
 8004262:	b510      	push	{r4, lr}
 8004264:	4604      	mov	r4, r0
 8004266:	e9c0 3300 	strd	r3, r3, [r0]
 800426a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800426e:	6083      	str	r3, [r0, #8]
 8004270:	8181      	strh	r1, [r0, #12]
 8004272:	6643      	str	r3, [r0, #100]	; 0x64
 8004274:	81c2      	strh	r2, [r0, #14]
 8004276:	6183      	str	r3, [r0, #24]
 8004278:	4619      	mov	r1, r3
 800427a:	2208      	movs	r2, #8
 800427c:	305c      	adds	r0, #92	; 0x5c
 800427e:	f000 f9e5 	bl	800464c <memset>
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <std+0x58>)
 8004284:	6263      	str	r3, [r4, #36]	; 0x24
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <std+0x5c>)
 8004288:	62a3      	str	r3, [r4, #40]	; 0x28
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <std+0x60>)
 800428c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <std+0x64>)
 8004290:	6323      	str	r3, [r4, #48]	; 0x30
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <std+0x68>)
 8004294:	6224      	str	r4, [r4, #32]
 8004296:	429c      	cmp	r4, r3
 8004298:	d006      	beq.n	80042a8 <std+0x48>
 800429a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800429e:	4294      	cmp	r4, r2
 80042a0:	d002      	beq.n	80042a8 <std+0x48>
 80042a2:	33d0      	adds	r3, #208	; 0xd0
 80042a4:	429c      	cmp	r4, r3
 80042a6:	d105      	bne.n	80042b4 <std+0x54>
 80042a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b0:	f000 ba44 	b.w	800473c <__retarget_lock_init_recursive>
 80042b4:	bd10      	pop	{r4, pc}
 80042b6:	bf00      	nop
 80042b8:	0800449d 	.word	0x0800449d
 80042bc:	080044bf 	.word	0x080044bf
 80042c0:	080044f7 	.word	0x080044f7
 80042c4:	0800451b 	.word	0x0800451b
 80042c8:	200007ec 	.word	0x200007ec

080042cc <stdio_exit_handler>:
 80042cc:	4a02      	ldr	r2, [pc, #8]	; (80042d8 <stdio_exit_handler+0xc>)
 80042ce:	4903      	ldr	r1, [pc, #12]	; (80042dc <stdio_exit_handler+0x10>)
 80042d0:	4803      	ldr	r0, [pc, #12]	; (80042e0 <stdio_exit_handler+0x14>)
 80042d2:	f000 b869 	b.w	80043a8 <_fwalk_sglue>
 80042d6:	bf00      	nop
 80042d8:	20000014 	.word	0x20000014
 80042dc:	08004a5d 	.word	0x08004a5d
 80042e0:	20000020 	.word	0x20000020

080042e4 <cleanup_stdio>:
 80042e4:	6841      	ldr	r1, [r0, #4]
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <cleanup_stdio+0x34>)
 80042e8:	4299      	cmp	r1, r3
 80042ea:	b510      	push	{r4, lr}
 80042ec:	4604      	mov	r4, r0
 80042ee:	d001      	beq.n	80042f4 <cleanup_stdio+0x10>
 80042f0:	f000 fbb4 	bl	8004a5c <_fflush_r>
 80042f4:	68a1      	ldr	r1, [r4, #8]
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <cleanup_stdio+0x38>)
 80042f8:	4299      	cmp	r1, r3
 80042fa:	d002      	beq.n	8004302 <cleanup_stdio+0x1e>
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fbad 	bl	8004a5c <_fflush_r>
 8004302:	68e1      	ldr	r1, [r4, #12]
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <cleanup_stdio+0x3c>)
 8004306:	4299      	cmp	r1, r3
 8004308:	d004      	beq.n	8004314 <cleanup_stdio+0x30>
 800430a:	4620      	mov	r0, r4
 800430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004310:	f000 bba4 	b.w	8004a5c <_fflush_r>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	bf00      	nop
 8004318:	200007ec 	.word	0x200007ec
 800431c:	20000854 	.word	0x20000854
 8004320:	200008bc 	.word	0x200008bc

08004324 <global_stdio_init.part.0>:
 8004324:	b510      	push	{r4, lr}
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <global_stdio_init.part.0+0x30>)
 8004328:	4c0b      	ldr	r4, [pc, #44]	; (8004358 <global_stdio_init.part.0+0x34>)
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <global_stdio_init.part.0+0x38>)
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	4620      	mov	r0, r4
 8004330:	2200      	movs	r2, #0
 8004332:	2104      	movs	r1, #4
 8004334:	f7ff ff94 	bl	8004260 <std>
 8004338:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800433c:	2201      	movs	r2, #1
 800433e:	2109      	movs	r1, #9
 8004340:	f7ff ff8e 	bl	8004260 <std>
 8004344:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004348:	2202      	movs	r2, #2
 800434a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434e:	2112      	movs	r1, #18
 8004350:	f7ff bf86 	b.w	8004260 <std>
 8004354:	20000924 	.word	0x20000924
 8004358:	200007ec 	.word	0x200007ec
 800435c:	080042cd 	.word	0x080042cd

08004360 <__sfp_lock_acquire>:
 8004360:	4801      	ldr	r0, [pc, #4]	; (8004368 <__sfp_lock_acquire+0x8>)
 8004362:	f000 b9ec 	b.w	800473e <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	2000092d 	.word	0x2000092d

0800436c <__sfp_lock_release>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__sfp_lock_release+0x8>)
 800436e:	f000 b9e7 	b.w	8004740 <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	2000092d 	.word	0x2000092d

08004378 <__sinit>:
 8004378:	b510      	push	{r4, lr}
 800437a:	4604      	mov	r4, r0
 800437c:	f7ff fff0 	bl	8004360 <__sfp_lock_acquire>
 8004380:	6a23      	ldr	r3, [r4, #32]
 8004382:	b11b      	cbz	r3, 800438c <__sinit+0x14>
 8004384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004388:	f7ff bff0 	b.w	800436c <__sfp_lock_release>
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <__sinit+0x28>)
 800438e:	6223      	str	r3, [r4, #32]
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <__sinit+0x2c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f5      	bne.n	8004384 <__sinit+0xc>
 8004398:	f7ff ffc4 	bl	8004324 <global_stdio_init.part.0>
 800439c:	e7f2      	b.n	8004384 <__sinit+0xc>
 800439e:	bf00      	nop
 80043a0:	080042e5 	.word	0x080042e5
 80043a4:	20000924 	.word	0x20000924

080043a8 <_fwalk_sglue>:
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ac:	4607      	mov	r7, r0
 80043ae:	4688      	mov	r8, r1
 80043b0:	4614      	mov	r4, r2
 80043b2:	2600      	movs	r6, #0
 80043b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b8:	f1b9 0901 	subs.w	r9, r9, #1
 80043bc:	d505      	bpl.n	80043ca <_fwalk_sglue+0x22>
 80043be:	6824      	ldr	r4, [r4, #0]
 80043c0:	2c00      	cmp	r4, #0
 80043c2:	d1f7      	bne.n	80043b4 <_fwalk_sglue+0xc>
 80043c4:	4630      	mov	r0, r6
 80043c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ca:	89ab      	ldrh	r3, [r5, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d907      	bls.n	80043e0 <_fwalk_sglue+0x38>
 80043d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043d4:	3301      	adds	r3, #1
 80043d6:	d003      	beq.n	80043e0 <_fwalk_sglue+0x38>
 80043d8:	4629      	mov	r1, r5
 80043da:	4638      	mov	r0, r7
 80043dc:	47c0      	blx	r8
 80043de:	4306      	orrs	r6, r0
 80043e0:	3568      	adds	r5, #104	; 0x68
 80043e2:	e7e9      	b.n	80043b8 <_fwalk_sglue+0x10>

080043e4 <_puts_r>:
 80043e4:	6a03      	ldr	r3, [r0, #32]
 80043e6:	b570      	push	{r4, r5, r6, lr}
 80043e8:	6884      	ldr	r4, [r0, #8]
 80043ea:	4605      	mov	r5, r0
 80043ec:	460e      	mov	r6, r1
 80043ee:	b90b      	cbnz	r3, 80043f4 <_puts_r+0x10>
 80043f0:	f7ff ffc2 	bl	8004378 <__sinit>
 80043f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f6:	07db      	lsls	r3, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_puts_r+0x22>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	0598      	lsls	r0, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_puts_r+0x22>
 8004400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004402:	f000 f99c 	bl	800473e <__retarget_lock_acquire_recursive>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	0719      	lsls	r1, r3, #28
 800440a:	d513      	bpl.n	8004434 <_puts_r+0x50>
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	b18b      	cbz	r3, 8004434 <_puts_r+0x50>
 8004410:	3e01      	subs	r6, #1
 8004412:	68a3      	ldr	r3, [r4, #8]
 8004414:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004418:	3b01      	subs	r3, #1
 800441a:	60a3      	str	r3, [r4, #8]
 800441c:	b9e9      	cbnz	r1, 800445a <_puts_r+0x76>
 800441e:	2b00      	cmp	r3, #0
 8004420:	da2e      	bge.n	8004480 <_puts_r+0x9c>
 8004422:	4622      	mov	r2, r4
 8004424:	210a      	movs	r1, #10
 8004426:	4628      	mov	r0, r5
 8004428:	f000 f87b 	bl	8004522 <__swbuf_r>
 800442c:	3001      	adds	r0, #1
 800442e:	d007      	beq.n	8004440 <_puts_r+0x5c>
 8004430:	250a      	movs	r5, #10
 8004432:	e007      	b.n	8004444 <_puts_r+0x60>
 8004434:	4621      	mov	r1, r4
 8004436:	4628      	mov	r0, r5
 8004438:	f000 f8b0 	bl	800459c <__swsetup_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	d0e7      	beq.n	8004410 <_puts_r+0x2c>
 8004440:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004446:	07da      	lsls	r2, r3, #31
 8004448:	d405      	bmi.n	8004456 <_puts_r+0x72>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	059b      	lsls	r3, r3, #22
 800444e:	d402      	bmi.n	8004456 <_puts_r+0x72>
 8004450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004452:	f000 f975 	bl	8004740 <__retarget_lock_release_recursive>
 8004456:	4628      	mov	r0, r5
 8004458:	bd70      	pop	{r4, r5, r6, pc}
 800445a:	2b00      	cmp	r3, #0
 800445c:	da04      	bge.n	8004468 <_puts_r+0x84>
 800445e:	69a2      	ldr	r2, [r4, #24]
 8004460:	429a      	cmp	r2, r3
 8004462:	dc06      	bgt.n	8004472 <_puts_r+0x8e>
 8004464:	290a      	cmp	r1, #10
 8004466:	d004      	beq.n	8004472 <_puts_r+0x8e>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	6022      	str	r2, [r4, #0]
 800446e:	7019      	strb	r1, [r3, #0]
 8004470:	e7cf      	b.n	8004412 <_puts_r+0x2e>
 8004472:	4622      	mov	r2, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f854 	bl	8004522 <__swbuf_r>
 800447a:	3001      	adds	r0, #1
 800447c:	d1c9      	bne.n	8004412 <_puts_r+0x2e>
 800447e:	e7df      	b.n	8004440 <_puts_r+0x5c>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	250a      	movs	r5, #10
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	701d      	strb	r5, [r3, #0]
 800448a:	e7db      	b.n	8004444 <_puts_r+0x60>

0800448c <puts>:
 800448c:	4b02      	ldr	r3, [pc, #8]	; (8004498 <puts+0xc>)
 800448e:	4601      	mov	r1, r0
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	f7ff bfa7 	b.w	80043e4 <_puts_r>
 8004496:	bf00      	nop
 8004498:	2000006c 	.word	0x2000006c

0800449c <__sread>:
 800449c:	b510      	push	{r4, lr}
 800449e:	460c      	mov	r4, r1
 80044a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a4:	f000 f8fc 	bl	80046a0 <_read_r>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	bfab      	itete	ge
 80044ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044ae:	89a3      	ldrhlt	r3, [r4, #12]
 80044b0:	181b      	addge	r3, r3, r0
 80044b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044b6:	bfac      	ite	ge
 80044b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80044ba:	81a3      	strhlt	r3, [r4, #12]
 80044bc:	bd10      	pop	{r4, pc}

080044be <__swrite>:
 80044be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c2:	461f      	mov	r7, r3
 80044c4:	898b      	ldrh	r3, [r1, #12]
 80044c6:	05db      	lsls	r3, r3, #23
 80044c8:	4605      	mov	r5, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	4616      	mov	r6, r2
 80044ce:	d505      	bpl.n	80044dc <__swrite+0x1e>
 80044d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d4:	2302      	movs	r3, #2
 80044d6:	2200      	movs	r2, #0
 80044d8:	f000 f8d0 	bl	800467c <_lseek_r>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	4632      	mov	r2, r6
 80044ea:	463b      	mov	r3, r7
 80044ec:	4628      	mov	r0, r5
 80044ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	f000 b8e7 	b.w	80046c4 <_write_r>

080044f6 <__sseek>:
 80044f6:	b510      	push	{r4, lr}
 80044f8:	460c      	mov	r4, r1
 80044fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fe:	f000 f8bd 	bl	800467c <_lseek_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	bf15      	itete	ne
 8004508:	6560      	strne	r0, [r4, #84]	; 0x54
 800450a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800450e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004512:	81a3      	strheq	r3, [r4, #12]
 8004514:	bf18      	it	ne
 8004516:	81a3      	strhne	r3, [r4, #12]
 8004518:	bd10      	pop	{r4, pc}

0800451a <__sclose>:
 800451a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451e:	f000 b89d 	b.w	800465c <_close_r>

08004522 <__swbuf_r>:
 8004522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004524:	460e      	mov	r6, r1
 8004526:	4614      	mov	r4, r2
 8004528:	4605      	mov	r5, r0
 800452a:	b118      	cbz	r0, 8004534 <__swbuf_r+0x12>
 800452c:	6a03      	ldr	r3, [r0, #32]
 800452e:	b90b      	cbnz	r3, 8004534 <__swbuf_r+0x12>
 8004530:	f7ff ff22 	bl	8004378 <__sinit>
 8004534:	69a3      	ldr	r3, [r4, #24]
 8004536:	60a3      	str	r3, [r4, #8]
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	071a      	lsls	r2, r3, #28
 800453c:	d525      	bpl.n	800458a <__swbuf_r+0x68>
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	b31b      	cbz	r3, 800458a <__swbuf_r+0x68>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	6922      	ldr	r2, [r4, #16]
 8004546:	1a98      	subs	r0, r3, r2
 8004548:	6963      	ldr	r3, [r4, #20]
 800454a:	b2f6      	uxtb	r6, r6
 800454c:	4283      	cmp	r3, r0
 800454e:	4637      	mov	r7, r6
 8004550:	dc04      	bgt.n	800455c <__swbuf_r+0x3a>
 8004552:	4621      	mov	r1, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 fa81 	bl	8004a5c <_fflush_r>
 800455a:	b9e0      	cbnz	r0, 8004596 <__swbuf_r+0x74>
 800455c:	68a3      	ldr	r3, [r4, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	701e      	strb	r6, [r3, #0]
 800456a:	6962      	ldr	r2, [r4, #20]
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	429a      	cmp	r2, r3
 8004570:	d004      	beq.n	800457c <__swbuf_r+0x5a>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	07db      	lsls	r3, r3, #31
 8004576:	d506      	bpl.n	8004586 <__swbuf_r+0x64>
 8004578:	2e0a      	cmp	r6, #10
 800457a:	d104      	bne.n	8004586 <__swbuf_r+0x64>
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fa6c 	bl	8004a5c <_fflush_r>
 8004584:	b938      	cbnz	r0, 8004596 <__swbuf_r+0x74>
 8004586:	4638      	mov	r0, r7
 8004588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458a:	4621      	mov	r1, r4
 800458c:	4628      	mov	r0, r5
 800458e:	f000 f805 	bl	800459c <__swsetup_r>
 8004592:	2800      	cmp	r0, #0
 8004594:	d0d5      	beq.n	8004542 <__swbuf_r+0x20>
 8004596:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800459a:	e7f4      	b.n	8004586 <__swbuf_r+0x64>

0800459c <__swsetup_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <__swsetup_r+0xac>)
 80045a0:	4605      	mov	r5, r0
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	460c      	mov	r4, r1
 80045a6:	b118      	cbz	r0, 80045b0 <__swsetup_r+0x14>
 80045a8:	6a03      	ldr	r3, [r0, #32]
 80045aa:	b90b      	cbnz	r3, 80045b0 <__swsetup_r+0x14>
 80045ac:	f7ff fee4 	bl	8004378 <__sinit>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045b6:	0718      	lsls	r0, r3, #28
 80045b8:	d422      	bmi.n	8004600 <__swsetup_r+0x64>
 80045ba:	06d9      	lsls	r1, r3, #27
 80045bc:	d407      	bmi.n	80045ce <__swsetup_r+0x32>
 80045be:	2309      	movs	r3, #9
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045cc:	e034      	b.n	8004638 <__swsetup_r+0x9c>
 80045ce:	0758      	lsls	r0, r3, #29
 80045d0:	d512      	bpl.n	80045f8 <__swsetup_r+0x5c>
 80045d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045d4:	b141      	cbz	r1, 80045e8 <__swsetup_r+0x4c>
 80045d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045da:	4299      	cmp	r1, r3
 80045dc:	d002      	beq.n	80045e4 <__swsetup_r+0x48>
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f8be 	bl	8004760 <_free_r>
 80045e4:	2300      	movs	r3, #0
 80045e6:	6363      	str	r3, [r4, #52]	; 0x34
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	2300      	movs	r3, #0
 80045f2:	6063      	str	r3, [r4, #4]
 80045f4:	6923      	ldr	r3, [r4, #16]
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f043 0308 	orr.w	r3, r3, #8
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	b94b      	cbnz	r3, 8004618 <__swsetup_r+0x7c>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460e:	d003      	beq.n	8004618 <__swsetup_r+0x7c>
 8004610:	4621      	mov	r1, r4
 8004612:	4628      	mov	r0, r5
 8004614:	f000 fa70 	bl	8004af8 <__smakebuf_r>
 8004618:	89a0      	ldrh	r0, [r4, #12]
 800461a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800461e:	f010 0301 	ands.w	r3, r0, #1
 8004622:	d00a      	beq.n	800463a <__swsetup_r+0x9e>
 8004624:	2300      	movs	r3, #0
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	6963      	ldr	r3, [r4, #20]
 800462a:	425b      	negs	r3, r3
 800462c:	61a3      	str	r3, [r4, #24]
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	b943      	cbnz	r3, 8004644 <__swsetup_r+0xa8>
 8004632:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004636:	d1c4      	bne.n	80045c2 <__swsetup_r+0x26>
 8004638:	bd38      	pop	{r3, r4, r5, pc}
 800463a:	0781      	lsls	r1, r0, #30
 800463c:	bf58      	it	pl
 800463e:	6963      	ldrpl	r3, [r4, #20]
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	e7f4      	b.n	800462e <__swsetup_r+0x92>
 8004644:	2000      	movs	r0, #0
 8004646:	e7f7      	b.n	8004638 <__swsetup_r+0x9c>
 8004648:	2000006c 	.word	0x2000006c

0800464c <memset>:
 800464c:	4402      	add	r2, r0
 800464e:	4603      	mov	r3, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	d100      	bne.n	8004656 <memset+0xa>
 8004654:	4770      	bx	lr
 8004656:	f803 1b01 	strb.w	r1, [r3], #1
 800465a:	e7f9      	b.n	8004650 <memset+0x4>

0800465c <_close_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4d06      	ldr	r5, [pc, #24]	; (8004678 <_close_r+0x1c>)
 8004660:	2300      	movs	r3, #0
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	602b      	str	r3, [r5, #0]
 8004668:	f7fc fd05 	bl	8001076 <_close>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_close_r+0x1a>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b103      	cbz	r3, 8004676 <_close_r+0x1a>
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	20000928 	.word	0x20000928

0800467c <_lseek_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4d07      	ldr	r5, [pc, #28]	; (800469c <_lseek_r+0x20>)
 8004680:	4604      	mov	r4, r0
 8004682:	4608      	mov	r0, r1
 8004684:	4611      	mov	r1, r2
 8004686:	2200      	movs	r2, #0
 8004688:	602a      	str	r2, [r5, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	f7fc fd1a 	bl	80010c4 <_lseek>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_lseek_r+0x1e>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_lseek_r+0x1e>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	20000928 	.word	0x20000928

080046a0 <_read_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4d07      	ldr	r5, [pc, #28]	; (80046c0 <_read_r+0x20>)
 80046a4:	4604      	mov	r4, r0
 80046a6:	4608      	mov	r0, r1
 80046a8:	4611      	mov	r1, r2
 80046aa:	2200      	movs	r2, #0
 80046ac:	602a      	str	r2, [r5, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f7fc fca8 	bl	8001004 <_read>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d102      	bne.n	80046be <_read_r+0x1e>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	b103      	cbz	r3, 80046be <_read_r+0x1e>
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	20000928 	.word	0x20000928

080046c4 <_write_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4d07      	ldr	r5, [pc, #28]	; (80046e4 <_write_r+0x20>)
 80046c8:	4604      	mov	r4, r0
 80046ca:	4608      	mov	r0, r1
 80046cc:	4611      	mov	r1, r2
 80046ce:	2200      	movs	r2, #0
 80046d0:	602a      	str	r2, [r5, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f7fc fcb3 	bl	800103e <_write>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_write_r+0x1e>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_write_r+0x1e>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	20000928 	.word	0x20000928

080046e8 <__errno>:
 80046e8:	4b01      	ldr	r3, [pc, #4]	; (80046f0 <__errno+0x8>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	2000006c 	.word	0x2000006c

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	4d0d      	ldr	r5, [pc, #52]	; (800472c <__libc_init_array+0x38>)
 80046f8:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fa:	1b64      	subs	r4, r4, r5
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	2600      	movs	r6, #0
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	4d0b      	ldr	r5, [pc, #44]	; (8004734 <__libc_init_array+0x40>)
 8004706:	4c0c      	ldr	r4, [pc, #48]	; (8004738 <__libc_init_array+0x44>)
 8004708:	f000 fa64 	bl	8004bd4 <_init>
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	2600      	movs	r6, #0
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f855 3b04 	ldr.w	r3, [r5], #4
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f855 3b04 	ldr.w	r3, [r5], #4
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	08004cf8 	.word	0x08004cf8
 8004730:	08004cf8 	.word	0x08004cf8
 8004734:	08004cf8 	.word	0x08004cf8
 8004738:	08004cfc 	.word	0x08004cfc

0800473c <__retarget_lock_init_recursive>:
 800473c:	4770      	bx	lr

0800473e <__retarget_lock_acquire_recursive>:
 800473e:	4770      	bx	lr

08004740 <__retarget_lock_release_recursive>:
 8004740:	4770      	bx	lr

08004742 <memcpy>:
 8004742:	440a      	add	r2, r1
 8004744:	4291      	cmp	r1, r2
 8004746:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800474a:	d100      	bne.n	800474e <memcpy+0xc>
 800474c:	4770      	bx	lr
 800474e:	b510      	push	{r4, lr}
 8004750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004758:	4291      	cmp	r1, r2
 800475a:	d1f9      	bne.n	8004750 <memcpy+0xe>
 800475c:	bd10      	pop	{r4, pc}
	...

08004760 <_free_r>:
 8004760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004762:	2900      	cmp	r1, #0
 8004764:	d044      	beq.n	80047f0 <_free_r+0x90>
 8004766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800476a:	9001      	str	r0, [sp, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f1a1 0404 	sub.w	r4, r1, #4
 8004772:	bfb8      	it	lt
 8004774:	18e4      	addlt	r4, r4, r3
 8004776:	f000 f8df 	bl	8004938 <__malloc_lock>
 800477a:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <_free_r+0x94>)
 800477c:	9801      	ldr	r0, [sp, #4]
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	b933      	cbnz	r3, 8004790 <_free_r+0x30>
 8004782:	6063      	str	r3, [r4, #4]
 8004784:	6014      	str	r4, [r2, #0]
 8004786:	b003      	add	sp, #12
 8004788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800478c:	f000 b8da 	b.w	8004944 <__malloc_unlock>
 8004790:	42a3      	cmp	r3, r4
 8004792:	d908      	bls.n	80047a6 <_free_r+0x46>
 8004794:	6825      	ldr	r5, [r4, #0]
 8004796:	1961      	adds	r1, r4, r5
 8004798:	428b      	cmp	r3, r1
 800479a:	bf01      	itttt	eq
 800479c:	6819      	ldreq	r1, [r3, #0]
 800479e:	685b      	ldreq	r3, [r3, #4]
 80047a0:	1949      	addeq	r1, r1, r5
 80047a2:	6021      	streq	r1, [r4, #0]
 80047a4:	e7ed      	b.n	8004782 <_free_r+0x22>
 80047a6:	461a      	mov	r2, r3
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	b10b      	cbz	r3, 80047b0 <_free_r+0x50>
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d9fa      	bls.n	80047a6 <_free_r+0x46>
 80047b0:	6811      	ldr	r1, [r2, #0]
 80047b2:	1855      	adds	r5, r2, r1
 80047b4:	42a5      	cmp	r5, r4
 80047b6:	d10b      	bne.n	80047d0 <_free_r+0x70>
 80047b8:	6824      	ldr	r4, [r4, #0]
 80047ba:	4421      	add	r1, r4
 80047bc:	1854      	adds	r4, r2, r1
 80047be:	42a3      	cmp	r3, r4
 80047c0:	6011      	str	r1, [r2, #0]
 80047c2:	d1e0      	bne.n	8004786 <_free_r+0x26>
 80047c4:	681c      	ldr	r4, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	6053      	str	r3, [r2, #4]
 80047ca:	440c      	add	r4, r1
 80047cc:	6014      	str	r4, [r2, #0]
 80047ce:	e7da      	b.n	8004786 <_free_r+0x26>
 80047d0:	d902      	bls.n	80047d8 <_free_r+0x78>
 80047d2:	230c      	movs	r3, #12
 80047d4:	6003      	str	r3, [r0, #0]
 80047d6:	e7d6      	b.n	8004786 <_free_r+0x26>
 80047d8:	6825      	ldr	r5, [r4, #0]
 80047da:	1961      	adds	r1, r4, r5
 80047dc:	428b      	cmp	r3, r1
 80047de:	bf04      	itt	eq
 80047e0:	6819      	ldreq	r1, [r3, #0]
 80047e2:	685b      	ldreq	r3, [r3, #4]
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	bf04      	itt	eq
 80047e8:	1949      	addeq	r1, r1, r5
 80047ea:	6021      	streq	r1, [r4, #0]
 80047ec:	6054      	str	r4, [r2, #4]
 80047ee:	e7ca      	b.n	8004786 <_free_r+0x26>
 80047f0:	b003      	add	sp, #12
 80047f2:	bd30      	pop	{r4, r5, pc}
 80047f4:	20000930 	.word	0x20000930

080047f8 <sbrk_aligned>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4e0e      	ldr	r6, [pc, #56]	; (8004834 <sbrk_aligned+0x3c>)
 80047fc:	460c      	mov	r4, r1
 80047fe:	6831      	ldr	r1, [r6, #0]
 8004800:	4605      	mov	r5, r0
 8004802:	b911      	cbnz	r1, 800480a <sbrk_aligned+0x12>
 8004804:	f000 f9d6 	bl	8004bb4 <_sbrk_r>
 8004808:	6030      	str	r0, [r6, #0]
 800480a:	4621      	mov	r1, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f000 f9d1 	bl	8004bb4 <_sbrk_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d00a      	beq.n	800482c <sbrk_aligned+0x34>
 8004816:	1cc4      	adds	r4, r0, #3
 8004818:	f024 0403 	bic.w	r4, r4, #3
 800481c:	42a0      	cmp	r0, r4
 800481e:	d007      	beq.n	8004830 <sbrk_aligned+0x38>
 8004820:	1a21      	subs	r1, r4, r0
 8004822:	4628      	mov	r0, r5
 8004824:	f000 f9c6 	bl	8004bb4 <_sbrk_r>
 8004828:	3001      	adds	r0, #1
 800482a:	d101      	bne.n	8004830 <sbrk_aligned+0x38>
 800482c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004830:	4620      	mov	r0, r4
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	20000934 	.word	0x20000934

08004838 <_malloc_r>:
 8004838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800483c:	1ccd      	adds	r5, r1, #3
 800483e:	f025 0503 	bic.w	r5, r5, #3
 8004842:	3508      	adds	r5, #8
 8004844:	2d0c      	cmp	r5, #12
 8004846:	bf38      	it	cc
 8004848:	250c      	movcc	r5, #12
 800484a:	2d00      	cmp	r5, #0
 800484c:	4607      	mov	r7, r0
 800484e:	db01      	blt.n	8004854 <_malloc_r+0x1c>
 8004850:	42a9      	cmp	r1, r5
 8004852:	d905      	bls.n	8004860 <_malloc_r+0x28>
 8004854:	230c      	movs	r3, #12
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	2600      	movs	r6, #0
 800485a:	4630      	mov	r0, r6
 800485c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004860:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004934 <_malloc_r+0xfc>
 8004864:	f000 f868 	bl	8004938 <__malloc_lock>
 8004868:	f8d8 3000 	ldr.w	r3, [r8]
 800486c:	461c      	mov	r4, r3
 800486e:	bb5c      	cbnz	r4, 80048c8 <_malloc_r+0x90>
 8004870:	4629      	mov	r1, r5
 8004872:	4638      	mov	r0, r7
 8004874:	f7ff ffc0 	bl	80047f8 <sbrk_aligned>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	4604      	mov	r4, r0
 800487c:	d155      	bne.n	800492a <_malloc_r+0xf2>
 800487e:	f8d8 4000 	ldr.w	r4, [r8]
 8004882:	4626      	mov	r6, r4
 8004884:	2e00      	cmp	r6, #0
 8004886:	d145      	bne.n	8004914 <_malloc_r+0xdc>
 8004888:	2c00      	cmp	r4, #0
 800488a:	d048      	beq.n	800491e <_malloc_r+0xe6>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	4631      	mov	r1, r6
 8004890:	4638      	mov	r0, r7
 8004892:	eb04 0903 	add.w	r9, r4, r3
 8004896:	f000 f98d 	bl	8004bb4 <_sbrk_r>
 800489a:	4581      	cmp	r9, r0
 800489c:	d13f      	bne.n	800491e <_malloc_r+0xe6>
 800489e:	6821      	ldr	r1, [r4, #0]
 80048a0:	1a6d      	subs	r5, r5, r1
 80048a2:	4629      	mov	r1, r5
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff ffa7 	bl	80047f8 <sbrk_aligned>
 80048aa:	3001      	adds	r0, #1
 80048ac:	d037      	beq.n	800491e <_malloc_r+0xe6>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	442b      	add	r3, r5
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	f8d8 3000 	ldr.w	r3, [r8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d038      	beq.n	800492e <_malloc_r+0xf6>
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	42a2      	cmp	r2, r4
 80048c0:	d12b      	bne.n	800491a <_malloc_r+0xe2>
 80048c2:	2200      	movs	r2, #0
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	e00f      	b.n	80048e8 <_malloc_r+0xb0>
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	1b52      	subs	r2, r2, r5
 80048cc:	d41f      	bmi.n	800490e <_malloc_r+0xd6>
 80048ce:	2a0b      	cmp	r2, #11
 80048d0:	d917      	bls.n	8004902 <_malloc_r+0xca>
 80048d2:	1961      	adds	r1, r4, r5
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	6025      	str	r5, [r4, #0]
 80048d8:	bf18      	it	ne
 80048da:	6059      	strne	r1, [r3, #4]
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	bf08      	it	eq
 80048e0:	f8c8 1000 	streq.w	r1, [r8]
 80048e4:	5162      	str	r2, [r4, r5]
 80048e6:	604b      	str	r3, [r1, #4]
 80048e8:	4638      	mov	r0, r7
 80048ea:	f104 060b 	add.w	r6, r4, #11
 80048ee:	f000 f829 	bl	8004944 <__malloc_unlock>
 80048f2:	f026 0607 	bic.w	r6, r6, #7
 80048f6:	1d23      	adds	r3, r4, #4
 80048f8:	1af2      	subs	r2, r6, r3
 80048fa:	d0ae      	beq.n	800485a <_malloc_r+0x22>
 80048fc:	1b9b      	subs	r3, r3, r6
 80048fe:	50a3      	str	r3, [r4, r2]
 8004900:	e7ab      	b.n	800485a <_malloc_r+0x22>
 8004902:	42a3      	cmp	r3, r4
 8004904:	6862      	ldr	r2, [r4, #4]
 8004906:	d1dd      	bne.n	80048c4 <_malloc_r+0x8c>
 8004908:	f8c8 2000 	str.w	r2, [r8]
 800490c:	e7ec      	b.n	80048e8 <_malloc_r+0xb0>
 800490e:	4623      	mov	r3, r4
 8004910:	6864      	ldr	r4, [r4, #4]
 8004912:	e7ac      	b.n	800486e <_malloc_r+0x36>
 8004914:	4634      	mov	r4, r6
 8004916:	6876      	ldr	r6, [r6, #4]
 8004918:	e7b4      	b.n	8004884 <_malloc_r+0x4c>
 800491a:	4613      	mov	r3, r2
 800491c:	e7cc      	b.n	80048b8 <_malloc_r+0x80>
 800491e:	230c      	movs	r3, #12
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	4638      	mov	r0, r7
 8004924:	f000 f80e 	bl	8004944 <__malloc_unlock>
 8004928:	e797      	b.n	800485a <_malloc_r+0x22>
 800492a:	6025      	str	r5, [r4, #0]
 800492c:	e7dc      	b.n	80048e8 <_malloc_r+0xb0>
 800492e:	605b      	str	r3, [r3, #4]
 8004930:	deff      	udf	#255	; 0xff
 8004932:	bf00      	nop
 8004934:	20000930 	.word	0x20000930

08004938 <__malloc_lock>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__malloc_lock+0x8>)
 800493a:	f7ff bf00 	b.w	800473e <__retarget_lock_acquire_recursive>
 800493e:	bf00      	nop
 8004940:	2000092c 	.word	0x2000092c

08004944 <__malloc_unlock>:
 8004944:	4801      	ldr	r0, [pc, #4]	; (800494c <__malloc_unlock+0x8>)
 8004946:	f7ff befb 	b.w	8004740 <__retarget_lock_release_recursive>
 800494a:	bf00      	nop
 800494c:	2000092c 	.word	0x2000092c

08004950 <__sflush_r>:
 8004950:	898a      	ldrh	r2, [r1, #12]
 8004952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	4605      	mov	r5, r0
 8004958:	0710      	lsls	r0, r2, #28
 800495a:	460c      	mov	r4, r1
 800495c:	d458      	bmi.n	8004a10 <__sflush_r+0xc0>
 800495e:	684b      	ldr	r3, [r1, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dc05      	bgt.n	8004970 <__sflush_r+0x20>
 8004964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	dc02      	bgt.n	8004970 <__sflush_r+0x20>
 800496a:	2000      	movs	r0, #0
 800496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004972:	2e00      	cmp	r6, #0
 8004974:	d0f9      	beq.n	800496a <__sflush_r+0x1a>
 8004976:	2300      	movs	r3, #0
 8004978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800497c:	682f      	ldr	r7, [r5, #0]
 800497e:	6a21      	ldr	r1, [r4, #32]
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	d032      	beq.n	80049ea <__sflush_r+0x9a>
 8004984:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	075a      	lsls	r2, r3, #29
 800498a:	d505      	bpl.n	8004998 <__sflush_r+0x48>
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	1ac0      	subs	r0, r0, r3
 8004990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004992:	b10b      	cbz	r3, 8004998 <__sflush_r+0x48>
 8004994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004996:	1ac0      	subs	r0, r0, r3
 8004998:	2300      	movs	r3, #0
 800499a:	4602      	mov	r2, r0
 800499c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800499e:	6a21      	ldr	r1, [r4, #32]
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b0      	blx	r6
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	d106      	bne.n	80049b8 <__sflush_r+0x68>
 80049aa:	6829      	ldr	r1, [r5, #0]
 80049ac:	291d      	cmp	r1, #29
 80049ae:	d82b      	bhi.n	8004a08 <__sflush_r+0xb8>
 80049b0:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <__sflush_r+0x108>)
 80049b2:	410a      	asrs	r2, r1
 80049b4:	07d6      	lsls	r6, r2, #31
 80049b6:	d427      	bmi.n	8004a08 <__sflush_r+0xb8>
 80049b8:	2200      	movs	r2, #0
 80049ba:	6062      	str	r2, [r4, #4]
 80049bc:	04d9      	lsls	r1, r3, #19
 80049be:	6922      	ldr	r2, [r4, #16]
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	d504      	bpl.n	80049ce <__sflush_r+0x7e>
 80049c4:	1c42      	adds	r2, r0, #1
 80049c6:	d101      	bne.n	80049cc <__sflush_r+0x7c>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b903      	cbnz	r3, 80049ce <__sflush_r+0x7e>
 80049cc:	6560      	str	r0, [r4, #84]	; 0x54
 80049ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049d0:	602f      	str	r7, [r5, #0]
 80049d2:	2900      	cmp	r1, #0
 80049d4:	d0c9      	beq.n	800496a <__sflush_r+0x1a>
 80049d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049da:	4299      	cmp	r1, r3
 80049dc:	d002      	beq.n	80049e4 <__sflush_r+0x94>
 80049de:	4628      	mov	r0, r5
 80049e0:	f7ff febe 	bl	8004760 <_free_r>
 80049e4:	2000      	movs	r0, #0
 80049e6:	6360      	str	r0, [r4, #52]	; 0x34
 80049e8:	e7c0      	b.n	800496c <__sflush_r+0x1c>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4628      	mov	r0, r5
 80049ee:	47b0      	blx	r6
 80049f0:	1c41      	adds	r1, r0, #1
 80049f2:	d1c8      	bne.n	8004986 <__sflush_r+0x36>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0c5      	beq.n	8004986 <__sflush_r+0x36>
 80049fa:	2b1d      	cmp	r3, #29
 80049fc:	d001      	beq.n	8004a02 <__sflush_r+0xb2>
 80049fe:	2b16      	cmp	r3, #22
 8004a00:	d101      	bne.n	8004a06 <__sflush_r+0xb6>
 8004a02:	602f      	str	r7, [r5, #0]
 8004a04:	e7b1      	b.n	800496a <__sflush_r+0x1a>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	e7ad      	b.n	800496c <__sflush_r+0x1c>
 8004a10:	690f      	ldr	r7, [r1, #16]
 8004a12:	2f00      	cmp	r7, #0
 8004a14:	d0a9      	beq.n	800496a <__sflush_r+0x1a>
 8004a16:	0793      	lsls	r3, r2, #30
 8004a18:	680e      	ldr	r6, [r1, #0]
 8004a1a:	bf08      	it	eq
 8004a1c:	694b      	ldreq	r3, [r1, #20]
 8004a1e:	600f      	str	r7, [r1, #0]
 8004a20:	bf18      	it	ne
 8004a22:	2300      	movne	r3, #0
 8004a24:	eba6 0807 	sub.w	r8, r6, r7
 8004a28:	608b      	str	r3, [r1, #8]
 8004a2a:	f1b8 0f00 	cmp.w	r8, #0
 8004a2e:	dd9c      	ble.n	800496a <__sflush_r+0x1a>
 8004a30:	6a21      	ldr	r1, [r4, #32]
 8004a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a34:	4643      	mov	r3, r8
 8004a36:	463a      	mov	r2, r7
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b0      	blx	r6
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	dc06      	bgt.n	8004a4e <__sflush_r+0xfe>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a4c:	e78e      	b.n	800496c <__sflush_r+0x1c>
 8004a4e:	4407      	add	r7, r0
 8004a50:	eba8 0800 	sub.w	r8, r8, r0
 8004a54:	e7e9      	b.n	8004a2a <__sflush_r+0xda>
 8004a56:	bf00      	nop
 8004a58:	dfbffffe 	.word	0xdfbffffe

08004a5c <_fflush_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	690b      	ldr	r3, [r1, #16]
 8004a60:	4605      	mov	r5, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	b913      	cbnz	r3, 8004a6c <_fflush_r+0x10>
 8004a66:	2500      	movs	r5, #0
 8004a68:	4628      	mov	r0, r5
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	b118      	cbz	r0, 8004a76 <_fflush_r+0x1a>
 8004a6e:	6a03      	ldr	r3, [r0, #32]
 8004a70:	b90b      	cbnz	r3, 8004a76 <_fflush_r+0x1a>
 8004a72:	f7ff fc81 	bl	8004378 <__sinit>
 8004a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f3      	beq.n	8004a66 <_fflush_r+0xa>
 8004a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a80:	07d0      	lsls	r0, r2, #31
 8004a82:	d404      	bmi.n	8004a8e <_fflush_r+0x32>
 8004a84:	0599      	lsls	r1, r3, #22
 8004a86:	d402      	bmi.n	8004a8e <_fflush_r+0x32>
 8004a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8a:	f7ff fe58 	bl	800473e <__retarget_lock_acquire_recursive>
 8004a8e:	4628      	mov	r0, r5
 8004a90:	4621      	mov	r1, r4
 8004a92:	f7ff ff5d 	bl	8004950 <__sflush_r>
 8004a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a98:	07da      	lsls	r2, r3, #31
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	d4e4      	bmi.n	8004a68 <_fflush_r+0xc>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	059b      	lsls	r3, r3, #22
 8004aa2:	d4e1      	bmi.n	8004a68 <_fflush_r+0xc>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aa6:	f7ff fe4b 	bl	8004740 <__retarget_lock_release_recursive>
 8004aaa:	e7dd      	b.n	8004a68 <_fflush_r+0xc>

08004aac <__swhatbuf_r>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	460c      	mov	r4, r1
 8004ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	b096      	sub	sp, #88	; 0x58
 8004ab8:	4615      	mov	r5, r2
 8004aba:	461e      	mov	r6, r3
 8004abc:	da0d      	bge.n	8004ada <__swhatbuf_r+0x2e>
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	bf0c      	ite	eq
 8004aca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ace:	2340      	movne	r3, #64	; 0x40
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	6031      	str	r1, [r6, #0]
 8004ad4:	602b      	str	r3, [r5, #0]
 8004ad6:	b016      	add	sp, #88	; 0x58
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	466a      	mov	r2, sp
 8004adc:	f000 f848 	bl	8004b70 <_fstat_r>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	dbec      	blt.n	8004abe <__swhatbuf_r+0x12>
 8004ae4:	9901      	ldr	r1, [sp, #4]
 8004ae6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004aea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004aee:	4259      	negs	r1, r3
 8004af0:	4159      	adcs	r1, r3
 8004af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af6:	e7eb      	b.n	8004ad0 <__swhatbuf_r+0x24>

08004af8 <__smakebuf_r>:
 8004af8:	898b      	ldrh	r3, [r1, #12]
 8004afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004afc:	079d      	lsls	r5, r3, #30
 8004afe:	4606      	mov	r6, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	d507      	bpl.n	8004b14 <__smakebuf_r+0x1c>
 8004b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	6123      	str	r3, [r4, #16]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	6163      	str	r3, [r4, #20]
 8004b10:	b002      	add	sp, #8
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	ab01      	add	r3, sp, #4
 8004b16:	466a      	mov	r2, sp
 8004b18:	f7ff ffc8 	bl	8004aac <__swhatbuf_r>
 8004b1c:	9900      	ldr	r1, [sp, #0]
 8004b1e:	4605      	mov	r5, r0
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff fe89 	bl	8004838 <_malloc_r>
 8004b26:	b948      	cbnz	r0, 8004b3c <__smakebuf_r+0x44>
 8004b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d4ef      	bmi.n	8004b10 <__smakebuf_r+0x18>
 8004b30:	f023 0303 	bic.w	r3, r3, #3
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	e7e3      	b.n	8004b04 <__smakebuf_r+0xc>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	6020      	str	r0, [r4, #0]
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	9b00      	ldr	r3, [sp, #0]
 8004b48:	6163      	str	r3, [r4, #20]
 8004b4a:	9b01      	ldr	r3, [sp, #4]
 8004b4c:	6120      	str	r0, [r4, #16]
 8004b4e:	b15b      	cbz	r3, 8004b68 <__smakebuf_r+0x70>
 8004b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 f81d 	bl	8004b94 <_isatty_r>
 8004b5a:	b128      	cbz	r0, 8004b68 <__smakebuf_r+0x70>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	431d      	orrs	r5, r3
 8004b6c:	81a5      	strh	r5, [r4, #12]
 8004b6e:	e7cf      	b.n	8004b10 <__smakebuf_r+0x18>

08004b70 <_fstat_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4d07      	ldr	r5, [pc, #28]	; (8004b90 <_fstat_r+0x20>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	602b      	str	r3, [r5, #0]
 8004b7e:	f7fc fa86 	bl	800108e <_fstat>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	d102      	bne.n	8004b8c <_fstat_r+0x1c>
 8004b86:	682b      	ldr	r3, [r5, #0]
 8004b88:	b103      	cbz	r3, 8004b8c <_fstat_r+0x1c>
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000928 	.word	0x20000928

08004b94 <_isatty_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d06      	ldr	r5, [pc, #24]	; (8004bb0 <_isatty_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fc fa85 	bl	80010ae <_isatty>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_isatty_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_isatty_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20000928 	.word	0x20000928

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	; (8004bd0 <_sbrk_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fc fa8e 	bl	80010e0 <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000928 	.word	0x20000928

08004bd4 <_init>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr

08004be0 <_fini>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr
